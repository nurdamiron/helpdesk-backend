#!/usr/bin/env node

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
 */

const { exec } = require('child_process');
const https = require('https');

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!TELEGRAM_BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(1);
}

async function stopTelegramWebhook() {
  return new Promise((resolve, reject) => {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/deleteWebhook`;
    
    https.get(url, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          if (result.ok) {
            console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            resolve();
          } else {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', result.description);
            resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          }
        } catch (error) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error.message);
          resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      });
    }).on('error', (error) => {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    });
  });
}

async function getUpdates() {
  return new Promise((resolve, reject) => {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?offset=-1`;
    
    https.get(url, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          if (result.ok) {
            console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
            resolve();
          } else {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', result.description);
            resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          }
        } catch (error) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error.message);
          resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      });
    }).on('error', (error) => {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    });
  });
}

async function killNodeProcesses() {
  return new Promise((resolve) => {
    // –ò—â–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å Telegram API
    exec('tasklist /FI "IMAGENAME eq node.exe" /FO CSV', (error, stdout, stderr) => {
      if (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error.message);
        resolve();
        return;
      }
      
      const lines = stdout.split('\n');
      const nodeProcesses = lines.filter(line => line.includes('node.exe'));
      
      if (nodeProcesses.length > 1) { // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${nodeProcesses.length} Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤`);
        console.log('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:');
        console.log('1. –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã');
        console.log('2. –ü–æ–¥–æ–∂–¥–∞—Ç—å 10-15 —Å–µ–∫—É–Ω–¥');
        console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∑–∞–Ω–æ–≤–æ');
      }
      
      resolve();
    });
  });
}

async function main() {
  console.log('üîÑ –û—á–∏—Å—Ç–∫–∞ Telegram API...');
  
  try {
    // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await stopTelegramWebhook();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    await getUpdates();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js
    await killNodeProcesses();
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä: npm start');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
  }
}

main();