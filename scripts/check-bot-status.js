#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

const lockFilePath = path.join(process.cwd(), '.telegram-bot.lock');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ lock —Ñ–∞–π–ª–∞
function checkLockFile() {
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ lock —Ñ–∞–π–ª–∞:');
  
  if (fs.existsSync(lockFilePath)) {
    try {
      const lockData = fs.readFileSync(lockFilePath, 'utf8');
      const lockInfo = JSON.parse(lockData);
      const lockAge = Date.now() - lockInfo.timestamp;
      const ageMinutes = Math.floor(lockAge / 1000 / 60);
      const ageSeconds = Math.floor((lockAge % 60000) / 1000);
      
      console.log(`‚úÖ Lock —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      console.log(`   PID: ${lockInfo.pid}`);
      console.log(`   Instance ID: ${lockInfo.instanceId}`);
      console.log(`   –í–æ–∑—Ä–∞—Å—Ç: ${ageMinutes}–º ${ageSeconds}—Å`);
      console.log(`   Timestamp: ${new Date(lockInfo.timestamp).toLocaleString()}`);
      
      if (lockAge > 5 * 60 * 1000) {
        console.log(`   ‚ö†Ô∏è Lock —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)`);
      }
      
      return lockInfo;
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è lock —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  } else {
    console.log('‚ùå Lock —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async function checkProcesses() {
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã node
    const { stdout: nodeProcesses } = await execPromise('ps aux | grep "node.*server.js" | grep -v grep || true');
    
    if (nodeProcesses.trim()) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–µ—Ä–≤–µ—Ä–∞:');
      const lines = nodeProcesses.trim().split('\n');
      lines.forEach(line => {
        const parts = line.split(/\s+/);
        if (parts.length > 10) {
          console.log(`   PID: ${parts[1]} - ${parts.slice(10).join(' ')}`);
        }
      });
    } else {
      console.log('‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å telegram –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const { stdout: telegramProcesses } = await execPromise('ps aux | grep -i telegram | grep -v grep || true');
    
    if (telegramProcesses.trim()) {
      console.log('\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã —Å "telegram" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:');
      const lines = telegramProcesses.trim().split('\n');
      lines.forEach(line => {
        const parts = line.split(/\s+/);
        if (parts.length > 10) {
          console.log(`   PID: ${parts[1]} - ${parts.slice(10).join(' ')}`);
        }
      });
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironment() {
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  
  require('dotenv').config();
  
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (botToken) {
    console.log(`‚úÖ TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${botToken.substring(0, 10)}...)`);
  } else {
    console.log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  
  const nodeEnv = process.env.NODE_ENV;
  console.log(`   NODE_ENV: ${nodeEnv || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  
  const frontendUrl = process.env.FRONTEND_URL;
  console.log(`   FRONTEND_URL: ${frontendUrl || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
async function checkPorts() {
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:');
  
  try {
    const { stdout } = await execPromise('netstat -tuln | grep :5002 || lsof -i :5002 || true');
    
    if (stdout.trim()) {
      console.log('‚úÖ –ü–æ—Ä—Ç 5002 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:');
      console.log(`   ${stdout.trim()}`);
    } else {
      console.log('‚ùå –ü–æ—Ä—Ç 5002 –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—ã (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ lock —Ñ–∞–π–ª–∞
  const lockInfo = checkLockFile();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  await checkProcesses();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  checkEnvironment();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
  await checkPorts();
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  
  if (lockInfo && lockInfo.timestamp && Date.now() - lockInfo.timestamp > 5 * 60 * 1000) {
    console.log('‚ö†Ô∏è Lock —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run telegram:force-reset');
  }
  
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    console.log('‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env');
  }
  
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});