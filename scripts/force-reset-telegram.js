#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ —Å–±—Ä–æ—Å–∞ Telegram –±–æ—Ç–∞
 */

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å Telegram –±–æ—Ç–∞...\n');

async function killProcesses() {
  console.log('üî™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ node...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    const { stdout } = await execPromise('ps aux | grep "node.*server.js" | grep -v grep || true');
    
    if (stdout.trim()) {
      const lines = stdout.trim().split('\n');
      for (const line of lines) {
        const parts = line.split(/\s+/);
        if (parts.length > 1) {
          const pid = parts[1];
          console.log(`   –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å PID: ${pid}`);
          try {
            await execPromise(`kill -9 ${pid}`);
          } catch (e) {
            console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}`);
          }
        }
      }
    } else {
      console.log('   –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } catch (error) {
    console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function clearLockFile() {
  console.log('\nüîì –£–¥–∞–ª–µ–Ω–∏–µ lock —Ñ–∞–π–ª–∞...');
  
  const lockFilePath = path.join(process.cwd(), '.telegram-bot.lock');
  
  if (fs.existsSync(lockFilePath)) {
    try {
      fs.unlinkSync(lockFilePath);
      console.log('   ‚úÖ Lock —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è lock —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  } else {
    console.log('   Lock —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

async function clearTelegramApi() {
  console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ Telegram API...');
  
  const token = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!token) {
    console.log('   ‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    const bot = new TelegramBot(token, { polling: false });
    
    // –£–¥–∞–ª—è–µ–º webhook
    console.log('   üåê –£–¥–∞–ª–µ–Ω–∏–µ webhook...');
    try {
      await bot.deleteWebHook();
      console.log('   ‚úÖ Webhook —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: ${error.message}`);
    }
    
    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    console.log('   üì® –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    try {
      let hasUpdates = true;
      let totalCleared = 0;
      
      while (hasUpdates) {
        const updates = await bot.getUpdates({ 
          offset: -1, 
          limit: 100,
          timeout: 0
        });
        
        if (updates.length > 0) {
          const lastUpdateId = updates[updates.length - 1].update_id;
          await bot.getUpdates({ 
            offset: lastUpdateId + 1, 
            limit: 1,
            timeout: 0 
          });
          totalCleared += updates.length;
          console.log(`   üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${updates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...`);
        } else {
          hasUpdates = false;
        }
      }
      
      console.log(`   ‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ (–≤—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: ${totalCleared})`);
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: ${error.message}`);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    try {
      await bot.close();
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    }
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function main() {
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js!');
  console.log('   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã...\n');
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // 1. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
  await killProcesses();
  
  // 2. –£–¥–∞–ª—è–µ–º lock —Ñ–∞–π–ª
  await clearLockFile();
  
  // 3. –û—á–∏—â–∞–µ–º Telegram API
  await clearTelegramApi();
  
  // 4. –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
  console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ (10 —Å–µ–∫—É–Ω–¥)...');
  await new Promise(resolve => setTimeout(resolve, 10000));
  
  console.log('\n‚úÖ –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('   –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: npm start');
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});