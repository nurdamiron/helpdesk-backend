#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Helpdesk
 * Script for resetting Helpdesk database
 */

require('dotenv').config();
const pool = require('../src/config/database');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function resetDatabase() {
  console.log('üóëÔ∏è  –°–ë–†–û–° –ë–ê–ó–´ –î–ê–ù–ù–´–• HELPDESK / HELPDESK DATABASE RESET');
  console.log('================================================');
  console.log('–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!');
  console.log('WARNING! This action will DELETE ALL data from the database!');
  console.log('================================================');
  
  const confirm1 = await askQuestion('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ');
  if (confirm1.toLowerCase() !== 'yes') {
    console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ / Operation cancelled');
    rl.close();
    process.exit(0);
  }

  const confirm2 = await askQuestion('–í–≤–µ–¥–∏—Ç–µ "DELETE ALL DATA" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ');
  if (confirm2 !== 'DELETE ALL DATA') {
    console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    rl.close();
    process.exit(0);
  }

  try {
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    await pool.query('SET FOREIGN_KEY_CHECKS = 0');
    console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π');

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    const tablesToClear = [
      'ticket_messages',
      'ticket_history', 
      'ticket_attachments',
      'ticket_notes',
      'task_comments',
      'employee_tasks',
      'tickets',
      'requesters',
      'users',
      'departments'
    ];

    for (const table of tablesToClear) {
      try {
        await pool.query(`DELETE FROM ${table}`);
        await pool.query(`ALTER TABLE ${table} AUTO_INCREMENT = 1`);
        console.log(`‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${table}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ${table}: ${error.message}`);
      }
    }

    // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    await pool.query('SET FOREIGN_KEY_CHECKS = 1');
    console.log('‚úÖ –í–∫–ª—é—á–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π');

    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');
    console.log('Database successfully cleared!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }

  rl.close();
  process.exit(0);
}

async function addAdminUser() {
  console.log('\nüë§ –°–û–ó–î–ê–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê / CREATING ADMINISTRATOR');
  console.log('=================================================');
  
  const email = await askQuestion('Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ');
  const password = await askQuestion('–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ');
  const firstName = await askQuestion('–ò–º—è (First Name): ');
  const lastName = await askQuestion('–§–∞–º–∏–ª–∏—è (Last Name): ');

  try {
    const [result] = await pool.query(
      `INSERT INTO users (email, password, first_name, last_name, role, is_active, created_at, updated_at)
       VALUES (?, ?, ?, ?, 'admin', 1, NOW(), NOW())`,
      [email, password, firstName, lastName]
    );

    console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å ID: ${result.insertId}`);
    console.log(`üìß Email: ${email}`);
    console.log(`üë§ –ò–º—è: ${firstName} ${lastName}`);
    console.log(`üîë –†–æ–ª—å: admin`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
  }
}

async function main() {
  console.log('Helpdesk Database Management Tool');
  console.log('================================');
  console.log('1. –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)');
  console.log('2. –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  console.log('3. –°–±—Ä–æ—Å–∏—Ç—å –ë–î –∏ —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  console.log('4. –í—ã—Ö–æ–¥');
  
  const choice = await askQuestion('\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ');
  
  switch (choice) {
    case '1':
      await resetDatabase();
      break;
    case '2':
      await addAdminUser();
      break;
    case '3':
      await resetDatabase();
      await addAdminUser();
      break;
    case '4':
      console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
      rl.close();
      process.exit(0);
      break;
    default:
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
      rl.close();
      process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  rl.close();
  process.exit(1);
});