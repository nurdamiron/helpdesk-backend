#!/usr/bin/env node

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
 * Adding demo data to database
 */

require('dotenv').config();
const pool = require('../src/config/database');

async function addDemoData() {
  console.log('üìä –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–ï–ú–û-–î–ê–ù–ù–´–• / ADDING DEMO DATA');
  console.log('============================================');

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—ã
    console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤...');
    const departments = [
      { name: 'IT Support', description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' },
      { name: 'HR', description: '–û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤' },
      { name: 'Finance', description: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç–¥–µ–ª' },
      { name: 'Operations', description: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª' }
    ];

    for (const dept of departments) {
      await pool.query(
        'INSERT INTO departments (name, description, created_at) VALUES (?, ?, NOW())',
        [dept.name, dept.description]
      );
    }
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ—Ç–¥–µ–ª–æ–≤: ' + departments.length);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = [
      { email: 'moderator@helpdesk.kz', password: 'mod123', first_name: 'Aidana', last_name: 'Moderator', role: 'moderator' },
      { email: 'support1@helpdesk.kz', password: 'moderator123', first_name: 'Arman', last_name: 'Tech', role: 'moderator' },
      { email: 'support2@helpdesk.kz', password: 'moderator123', first_name: 'Nazym', last_name: 'Helper', role: 'moderator' },
      { email: 'user1@company.kz', password: 'user123', first_name: '–ê—Å–ª–∞–Ω', last_name: '–°”ô–¥—É–∞“õ–∞—Å–æ–≤', role: 'user' },
      { email: 'user2@company.kz', password: 'user123', first_name: '–ì“Ø–ª–Ω–∞—Ä–∞', last_name: '–î–æ—Å—É–º–æ–≤–∞', role: 'user' },
      { email: 'user3@company.kz', password: 'user123', first_name: '–ë–µ—Ä—ñ–∫', last_name: '“ö–∞—Å—ã–º–æ–≤', role: 'user' }
    ];

    for (const user of users) {
      await pool.query(
        `INSERT INTO users (email, password, first_name, last_name, role, is_active, created_at, updated_at)
         VALUES (?, ?, ?, ?, ?, 1, NOW(), NOW())`,
        [user.email, user.password, user.first_name, user.last_name, user.role]
      );
    }
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + users.length);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
    console.log('üé´ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫...');
    const [adminUser] = await pool.query('SELECT id FROM users WHERE role = "admin" LIMIT 1');
    const [staffUsers] = await pool.query('SELECT id FROM users WHERE role = "staff"');
    const [regularUsers] = await pool.query('SELECT id FROM users WHERE role = "user"');

    const tickets = [
      {
        subject: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –≤ –æ—Ñ–∏—Å–µ',
        description: '–ü—Ä–∏–Ω—Ç–µ—Ä Canon –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ì–æ—Ä–∏—Ç –∫—Ä–∞—Å–Ω–∞—è –ª–∞–º–ø–æ—á–∫–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç.',
        type: 'support_request',
        priority: 'high',
        status: 'new',
        assigned_to: null,
        user_id: regularUsers[0]?.id
      },
      {
        subject: '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ CRM —Å–∏—Å—Ç–µ–º–µ',
        description: '–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ CRM —Å–∏—Å—Ç–µ–º—É. –ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω —Å–±—Ä–æ—Å.',
        type: 'support_request',
        priority: 'medium',
        status: 'in_progress',
        assigned_to: staffUsers[0]?.id,
        user_id: regularUsers[1]?.id
      },
      {
        subject: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞. –¢–µ–∫—É—â–∏–π –∏–º–µ–µ—Ç –¥–µ—Ñ–µ–∫—Ç—ã —ç–∫—Ä–∞–Ω–∞.',
        type: 'support_request',
        priority: 'low',
        status: 'pending',
        assigned_to: staffUsers[1]?.id,
        user_id: regularUsers[2]?.id
      },
      {
        subject: '–°–±–æ–π –≤ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞',
        description: '–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤. –ö—Ä–∏—Ç–∏—á–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞.',
        type: 'incident',
        priority: 'urgent',
        status: 'resolved',
        assigned_to: staffUsers[0]?.id,
        user_id: regularUsers[0]?.id
      },
      {
        subject: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
        description: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ IT –æ—Ç–¥–µ–ª–∞.',
        type: 'support_request',
        priority: 'medium',
        status: 'closed',
        assigned_to: adminUser[0]?.id,
        user_id: regularUsers[1]?.id
      }
    ];

    for (const ticket of tickets) {
      const [result] = await pool.query(
        `INSERT INTO tickets (subject, description, type, priority, status, assigned_to, user_id, created_at, updated_at)
         VALUES (?, ?, ?, ?, ?, ?, ?, DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 168) HOUR), NOW())`,
        [
          ticket.subject,
          ticket.description,
          ticket.type,
          ticket.priority,
          ticket.status,
          ticket.assigned_to,
          ticket.user_id
        ]
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞—è–≤–∫–∏
      await pool.query(
        `INSERT INTO ticket_history (ticket_id, action, old_value, new_value, user_id, created_at)
         VALUES (?, 'created', NULL, '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', ?, NOW())`,
        [result.insertId, ticket.user_id]
      );

      if (ticket.assigned_to) {
        await pool.query(
          `INSERT INTO ticket_history (ticket_id, action, old_value, new_value, user_id, created_at)
           VALUES (?, 'assigned', NULL, ?, ?, DATE_ADD(NOW(), INTERVAL 1 HOUR))`,
          [result.insertId, `–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${ticket.assigned_to}`, ticket.assigned_to]
        );
      }
    }
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫: ' + tickets.length);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∑–∞—è–≤–∫–∞–º
    console.log('üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –∑–∞—è–≤–∫–∞–º...');
    const [allTickets] = await pool.query('SELECT id FROM tickets');
    
    for (const ticket of allTickets.slice(0, 3)) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await pool.query(
        `INSERT INTO ticket_messages (ticket_id, sender_type, message, created_at)
         VALUES (?, 'user', '–î–æ–±–∞–≤–ª—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–±–ª–µ–º–µ...', DATE_ADD(NOW(), INTERVAL 30 MINUTE))`,
        [ticket.id]
      );
      
      // –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      await pool.query(
        `INSERT INTO ticket_messages (ticket_id, sender_type, message, created_at)
         VALUES (?, 'moderator', '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.', DATE_ADD(NOW(), INTERVAL 2 HOUR))`,
        [ticket.id]
      );
    }
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∑–∞—è–≤–∫–∞–º');

    console.log('\nüéâ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    console.log('Demo data successfully added!');
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`üè¢ –û—Ç–¥–µ–ª–æ–≤: ${departments.length}`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length + 1} (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∞)`);
    console.log(`üé´ –ó–∞—è–≤–æ–∫: ${tickets.length}`);
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${allTickets.slice(0, 3).length * 2}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }

  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
addDemoData();