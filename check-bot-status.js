#!/usr/bin/env node

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram –±–æ—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
 */

require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

const lockFile = path.join(__dirname, 'src/services/telegramBot/.telegram-bot.lock');

async function checkBotStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram –±–æ—Ç–∞...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ lock —Ñ–∞–π–ª–∞
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ lock —Ñ–∞–π–ª–∞...');
  if (fs.existsSync(lockFile)) {
    try {
      const lockData = JSON.parse(fs.readFileSync(lockFile, 'utf8'));
      const lockAge = Date.now() - lockData.timestamp;
      const ageMinutes = Math.floor(lockAge / 60000);
      
      console.log(`   üìÅ Lock —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω:`);
      console.log(`   ‚Ä¢ PID: ${lockData.pid}`);
      console.log(`   ‚Ä¢ Instance ID: ${lockData.instanceId}`);
      console.log(`   ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: ${ageMinutes} –º–∏–Ω—É—Ç`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
      try {
        if (process.platform === 'win32') {
          const { stdout } = await execPromise(`tasklist /FI "PID eq ${lockData.pid}" /FO CSV`);
          const processExists = stdout.includes(`"${lockData.pid}"`);
          
          if (processExists) {
            console.log(`   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${lockData.pid} –∞–∫—Ç–∏–≤–µ–Ω`);
          } else {
            console.log(`   ‚ùå –ü—Ä–æ—Ü–µ—Å—Å ${lockData.pid} –Ω–µ –Ω–∞–π–¥–µ–Ω (–∑–æ–º–±–∏ lock)`);
            console.log(`   üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª...`);
            fs.unlinkSync(lockFile);
          }
        } else {
          const { stdout } = await execPromise(`ps -p ${lockData.pid} -o pid=`);
          if (stdout.trim()) {
            console.log(`   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${lockData.pid} –∞–∫—Ç–∏–≤–µ–Ω`);
          } else {
            console.log(`   ‚ùå –ü—Ä–æ—Ü–µ—Å—Å ${lockData.pid} –Ω–µ –Ω–∞–π–¥–µ–Ω (–∑–æ–º–±–∏ lock)`);
            console.log(`   üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª...`);
            fs.unlinkSync(lockFile);
          }
        }
      } catch (error) {
        console.log(`   ‚ùå –ü—Ä–æ—Ü–µ—Å—Å ${lockData.pid} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        console.log(`   üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª...`);
        fs.unlinkSync(lockFile);
      }
      
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è lock —Ñ–∞–π–ª–∞:`, error.message);
    }
  } else {
    console.log(`   ‚úÖ Lock —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω)`);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
  try {
    if (process.platform === 'win32') {
      const { stdout } = await execPromise('tasklist /FI "IMAGENAME eq node.exe" /FO CSV');
      const lines = stdout.split('\n').filter(line => line.includes('node.exe'));
      console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${lines.length}`);
      
      if (lines.length > 0) {
        console.log('   –ü—Ä–æ—Ü–µ—Å—Å—ã:');
        lines.forEach(line => {
          const parts = line.split(',');
          if (parts.length > 1) {
            const pid = parts[1].replace(/"/g, '');
            console.log(`   ‚Ä¢ PID: ${pid}`);
          }
        });
      }
    } else {
      const { stdout } = await execPromise('ps aux | grep node | grep -v grep');
      const lines = stdout.split('\n').filter(line => line.trim());
      console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${lines.length}`);
      
      if (lines.length > 0) {
        console.log('   –ü—Ä–æ—Ü–µ—Å—Å—ã:');
        lines.forEach(line => {
          const parts = line.split(/\s+/);
          if (parts.length > 1) {
            console.log(`   ‚Ä¢ PID: ${parts[1]} - ${parts.slice(10).join(' ')}`);
          }
        });
      }
    }
  } catch (error) {
    console.log('   ‚ÑπÔ∏è Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
  if (process.env.TELEGRAM_BOT_TOKEN) {
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API...');
    try {
      const TelegramBot = require('node-telegram-bot-api');
      const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await bot.getMe();
      console.log(`   ‚úÖ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: @${botInfo.username}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
      const webhookInfo = await bot.getWebHookInfo();
      if (webhookInfo.url) {
        console.log(`   üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookInfo.url}`);
      } else {
        console.log(`   ‚úÖ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      }
      
      await bot.close();
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram API:`, error.message);
    }
  } else {
    console.log('\n3Ô∏è‚É£ TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  
  // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  if (fs.existsSync(lockFile)) {
    console.log('   ‚Ä¢ –ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ');
    console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run telegram:force-reset –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏');
  } else {
    console.log('   ‚Ä¢ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É');
    console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkBotStatus().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  process.exit(1);
});