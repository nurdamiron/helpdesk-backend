#!/usr/bin/env node

const mysql = require('mysql2/promise');
const Table = require('cli-table3');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

// –ü—Ä–æ—Å—Ç—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –±–µ–∑ chalk
const colors = {
    reset: '\x1b[0m',
    bold: '\x1b[1m',
    underline: '\x1b[4m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    gray: '\x1b[90m'
};

const c = {
    red: (text) => `${colors.red}${text}${colors.reset}`,
    green: (text) => `${colors.green}${text}${colors.reset}`,
    yellow: (text) => `${colors.yellow}${text}${colors.reset}`,
    blue: (text) => `${colors.blue}${text}${colors.reset}`,
    magenta: (text) => `${colors.magenta}${text}${colors.reset}`,
    cyan: (text) => `${colors.cyan}${text}${colors.reset}`,
    gray: (text) => `${colors.gray}${text}${colors.reset}`,
    bold: (text) => `${colors.bold}${text}${colors.reset}`,
    underline: (text) => `${colors.underline}${text}${colors.reset}`
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'biz360.czwiyugwum02.eu-north-1.rds.amazonaws.com',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || 'nurda0101',
    database: process.env.DB_NAME || 'helpdesk',
    port: process.env.DB_PORT || 3306
};

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
const typeColors = {
    'INT': c.blue,
    'VARCHAR': c.green,
    'TEXT': c.yellow,
    'DATETIME': c.magenta,
    'TIMESTAMP': c.magenta,
    'BOOLEAN': c.cyan,
    'ENUM': c.red,
    'JSON': c.yellow,
    'DECIMAL': c.blue
};

async function showDatabaseStructure() {
    let connection;
    
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        console.log(c.bold('\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...'));
        connection = await mysql.createConnection(dbConfig);
        console.log(c.green('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n'));

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
        const [tables] = await connection.execute('SHOW TABLES');
        const tableNames = tables.map(row => Object.values(row)[0]);
        
        console.log(c.bold(c.underline(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbConfig.database}`)));
        console.log(c.gray(`üè† –•–æ—Å—Ç: ${dbConfig.host}`));
        console.log(c.gray(`üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: ${tableNames.length}\n`));

        // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        let report = `# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${dbConfig.database}\n\n`;
        report += `**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:** ${new Date().toLocaleString('ru-RU')}\n`;
        report += `**–•–æ—Å—Ç:** ${dbConfig.host}\n`;
        report += `**–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü:** ${tableNames.length}\n\n`;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        for (const tableName of tableNames) {
            console.log(chalk.bold.blue(`\nüìë –¢–∞–±–ª–∏—Ü–∞: ${tableName}`));
            report += `## –¢–∞–±–ª–∏—Ü–∞: ${tableName}\n\n`;

            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
            const [columns] = await connection.execute(`DESCRIBE ${tableName}`);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
            const table = new Table({
                head: ['–ü–æ–ª–µ', '–¢–∏–ø', 'Null', 'Key', 'Default', 'Extra'],
                style: {
                    head: ['cyan'],
                    border: ['gray']
                }
            });

            // Markdown —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            report += '| –ü–æ–ª–µ | –¢–∏–ø | Null | Key | Default | Extra |\n';
            report += '|------|-----|------|-----|---------|-------|\n';

            columns.forEach(column => {
                const [field, type, nullAllowed, key, defaultValue, extra] = column;
                
                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞
                let coloredType = type;
                for (const [typeKey, colorFn] of Object.entries(typeColors)) {
                    if (type.toUpperCase().includes(typeKey)) {
                        coloredType = colorFn(type);
                        break;
                    }
                }

                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
                let keyDisplay = '';
                if (key === 'PRI') keyDisplay = chalk.yellow('üîë PRI');
                else if (key === 'MUL') keyDisplay = chalk.blue('üîó MUL');
                else if (key === 'UNI') keyDisplay = chalk.green('üÜî UNI');
                else keyDisplay = key;

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –∫–æ–Ω—Å–æ–ª–∏
                table.push([
                    chalk.bold(field),
                    coloredType,
                    nullAllowed === 'YES' ? chalk.gray('YES') : chalk.red('NO'),
                    keyDisplay,
                    defaultValue || chalk.gray('NULL'),
                    extra || ''
                ]);

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç—á–µ—Ç
                report += `| ${field} | ${type} | ${nullAllowed} | ${key} | ${defaultValue || 'NULL'} | ${extra} |\n`;
            });

            console.log(table.toString());
            report += '\n';

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            const [foreignKeys] = await connection.execute(`
                SELECT 
                    COLUMN_NAME,
                    CONSTRAINT_NAME,
                    REFERENCED_TABLE_NAME,
                    REFERENCED_COLUMN_NAME
                FROM information_schema.KEY_COLUMN_USAGE
                WHERE TABLE_NAME = ? 
                    AND TABLE_SCHEMA = ? 
                    AND REFERENCED_TABLE_NAME IS NOT NULL
            `, [tableName, dbConfig.database]);

            if (foreignKeys.length > 0) {
                console.log(chalk.yellow('\n  üîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:'));
                report += '### –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:\n\n';
                
                foreignKeys.forEach(fk => {
                    const constraint = `${fk.COLUMN_NAME} -> ${fk.REFERENCED_TABLE_NAME}.${fk.REFERENCED_COLUMN_NAME}`;
                    console.log(`    ‚Ä¢ ${chalk.blue(constraint)}`);
                    report += `- ${constraint}\n`;
                });
                report += '\n';
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
            const [[countResult]] = await connection.execute(`SELECT COUNT(*) as count FROM ${tableName}`);
            console.log(chalk.gray(`\n  üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${countResult.count}`));
            report += `**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** ${countResult.count}\n\n`;

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
            const [indexes] = await connection.execute(`SHOW INDEX FROM ${tableName}`);
            const uniqueIndexes = {};
            
            indexes.forEach(index => {
                if (!uniqueIndexes[index.Key_name]) {
                    uniqueIndexes[index.Key_name] = {
                        unique: !index.Non_unique,
                        columns: []
                    };
                }
                uniqueIndexes[index.Key_name].columns.push(index.Column_name);
            });

            if (Object.keys(uniqueIndexes).length > 1) { // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ PRIMARY
                console.log(chalk.yellow('\n  üîç –ò–Ω–¥–µ–∫—Å—ã:'));
                report += '### –ò–Ω–¥–µ–∫—Å—ã:\n\n';
                
                for (const [indexName, indexInfo] of Object.entries(uniqueIndexes)) {
                    if (indexName !== 'PRIMARY') {
                        const uniqueLabel = indexInfo.unique ? chalk.green('UNIQUE') : '';
                        console.log(`    ‚Ä¢ ${chalk.blue(indexName)} ${uniqueLabel}: (${indexInfo.columns.join(', ')})`);
                        report += `- ${indexName} ${indexInfo.unique ? 'UNIQUE' : ''}: (${indexInfo.columns.join(', ')})\n`;
                    }
                }
                report += '\n';
            }

            report += '---\n\n';
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log(chalk.bold.green('\n\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:'));
        
        const statsTable = new Table({
            style: { border: ['gray'] }
        });

        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        let totalRecords = 0;
        for (const tableName of tableNames) {
            const [[result]] = await connection.execute(`SELECT COUNT(*) as count FROM ${tableName}`);
            totalRecords += result.count;
            statsTable.push([tableName, chalk.yellow(result.count.toLocaleString())]);
        }

        statsTable.push([chalk.bold('–í–°–ï–ì–û'), chalk.bold.green(totalRecords.toLocaleString())]);
        console.log(statsTable.toString());

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—Ç—á–µ—Ç
        report += '## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n';
        report += '| –¢–∞–±–ª–∏—Ü–∞ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π |\n';
        report += '|---------|-------------------|\n';
        
        for (const tableName of tableNames) {
            const [[result]] = await connection.execute(`SELECT COUNT(*) as count FROM ${tableName}`);
            report += `| ${tableName} | ${result.count.toLocaleString()} |\n`;
        }
        report += `| **–í–°–ï–ì–û** | **${totalRecords.toLocaleString()}** |\n`;

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        const reportPath = path.join(__dirname, 'database_structure_detailed.md');
        await fs.writeFile(reportPath, report, 'utf8');
        
        console.log(chalk.green(`\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${chalk.bold(reportPath)}`));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
        console.log(chalk.bold.magenta('\n\nüï∏Ô∏è  –ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:'));
        
        const relationships = new Map();
        
        for (const tableName of tableNames) {
            const [fks] = await connection.execute(`
                SELECT 
                    REFERENCED_TABLE_NAME,
                    COUNT(*) as count
                FROM information_schema.KEY_COLUMN_USAGE
                WHERE TABLE_NAME = ? 
                    AND TABLE_SCHEMA = ? 
                    AND REFERENCED_TABLE_NAME IS NOT NULL
                GROUP BY REFERENCED_TABLE_NAME
            `, [tableName, dbConfig.database]);
            
            if (fks.length > 0) {
                fks.forEach(fk => {
                    console.log(`  ${chalk.blue(tableName)} ‚ûú ${chalk.green(fk.REFERENCED_TABLE_NAME)} ${chalk.gray(`(${fk.count} —Å–≤—è–∑–µ–π)`)}`);
                });
            }
        }

    } catch (error) {
        console.error(chalk.red('\n‚ùå –û—à–∏–±–∫–∞:'), error.message);
        process.exit(1);
    } finally {
        if (connection) {
            await connection.end();
            console.log(chalk.gray('\n\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ'));
        }
    }
}

// –ó–∞–ø—É—Å–∫
console.log(chalk.bold.cyan(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     üìä HelpDesk Database Explorer     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`));

showDatabaseStructure();