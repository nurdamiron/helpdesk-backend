/**
 * Authentication Controller
 * Handles user authentication, registration, and role-based access
 */

const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');
const pool = require('../services/pool');

// Environment variables
const JWT_SECRET = process.env.JWT_SECRET || 'helpdesk-secret-key';
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '24h';

/**
 * Login user with email and password
 */
exports.login = async (req, res) => {
  try {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ 
        status: 'error',
        error: 'Email и пароль обязательны' 
      });
    }

    // Find user by email
    const [users] = await pool.query(
      'SELECT u.*, us.language, us.timezone, us.notifications, us.preferences FROM users u ' +
      'LEFT JOIN user_settings us ON u.id = us.user_id ' +
      'WHERE u.email = ?',
      [email]
    );

    if (users.length === 0) {
      return res.status(401).json({ 
        status: 'error',
        error: 'Неверные учетные данные' 
      });
    }

    const user = users[0];

    // Check if user is active
    if (user.is_active === false) {
      return res.status(401).json({ 
        status: 'error',
        error: 'Аккаунт деактивирован' 
      });
    }

    // Check password - first try hashed password, if not found try direct comparison for legacy passwords
    let isPasswordValid = false;
    
    if (user.password.startsWith('$2b$') || user.password.startsWith('$2a$')) {
      // For bcrypt hashed passwords
      isPasswordValid = await bcrypt.compare(password, user.password);
    } else {
      // Legacy unhashed passwords - direct comparison
      isPasswordValid = user.password === password || 
                        user.password === password.trim() ||
                        user.password.trim() === password;
    }
    
    if (!isPasswordValid) {
      return res.status(401).json({ 
        status: 'error',
        error: 'Неверные учетные данные' 
      });
    }

    // Update last login
    await pool.query(
      'UPDATE users SET last_login = NOW() WHERE id = ?',
      [user.id]
    );

    // Create payload for token
    const payload = {
      userId: user.id,
      email: user.email,
      role: user.role || 'staff',
      firstName: user.first_name,
      lastName: user.last_name
    };

    // Generate JWT token
    const token = jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });

    // User data to return (without password)
    const userData = {
      id: user.id,
      email: user.email,
      firstName: user.first_name,
      lastName: user.last_name,
      position: user.position,
      role: user.role || 'staff',
      language: user.language || 'kk',
      timezone: user.timezone || 'asia-almaty',
      notifications: user.notifications || {},
      preferences: user.preferences || {}
    };

    // Return success with token and user data
    return res.status(200).json({
      status: 'success',
      token,
      user: userData
    });
  } catch (error) {
    console.error('Login error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера' 
    });
  }
};

/**
 * Register a new user (Staff role only, Admin/Moderator are created by admins)
 */
exports.register = async (req, res) => {
  try {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, password, firstName, lastName, position, phone, departmentId } = req.body;

    if (!email || !password) {
      return res.status(400).json({ 
        status: 'error',
        error: 'Email и пароль обязательны' 
      });
    }

    // Check if user already exists
    const [existingUsers] = await pool.query(
      'SELECT id FROM users WHERE email = ?',
      [email]
    );

    if (existingUsers.length > 0) {
      return res.status(400).json({ 
        status: 'error',
        error: 'Пользователь с таким email уже существует' 
      });
    }

    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Begin transaction
    const connection = await pool.getConnection();
    
    try {
      await connection.beginTransaction();
      
      // Insert new user with Staff role
      const [result] = await connection.query(
        'INSERT INTO users (email, password, first_name, last_name, position, phone, role, department_id) ' +
        'VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
        [email, hashedPassword, firstName, lastName, position, phone, 'staff', departmentId]
      );
      
      const userId = result.insertId;
      
      // Insert default user settings
      await connection.query(
        'INSERT INTO user_settings (user_id, language) VALUES (?, ?)',
        [userId, 'kk'] // Default language is Kazakh
      );
      
      await connection.commit();
      
      // Return success
      return res.status(201).json({
        status: 'success',
        message: 'Пользователь успешно зарегистрирован',
        userId
      });
    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('Registration error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера'
    });
  }
};

/**
 * Change password
 */
exports.changePassword = async (req, res) => {
  try {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { currentPassword, newPassword } = req.body;
    const userId = req.user.userId; // From JWT token

    // Get user
    const [users] = await pool.query(
      'SELECT password FROM users WHERE id = ?',
      [userId]
    );

    if (users.length === 0) {
      return res.status(404).json({ 
        status: 'error',
        error: 'Пользователь не найден' 
      });
    }

    const user = users[0];

    // Verify current password
    let isPasswordValid = false;
    
    if (user.password.startsWith('$2b$') || user.password.startsWith('$2a$')) {
      // For bcrypt hashed passwords
      isPasswordValid = await bcrypt.compare(currentPassword, user.password);
    } else {
      // Legacy unhashed passwords - direct comparison
      isPasswordValid = user.password === currentPassword ||
                        user.password === currentPassword.trim() ||
                        user.password.trim() === currentPassword;
    }
    
    if (!isPasswordValid) {
      return res.status(401).json({ 
        status: 'error',
        error: 'Текущий пароль неверен' 
      });
    }

    // Hash new password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    // Update password
    await pool.query(
      'UPDATE users SET password = ?, updated_at = NOW() WHERE id = ?',
      [hashedPassword, userId]
    );

    // Return success
    return res.status(200).json({
      status: 'success',
      message: 'Пароль успешно изменен'
    });
  } catch (error) {
    console.error('Change password error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера'
    });
  }
};

/**
 * Get current user profile
 */
exports.getProfile = async (req, res) => {
  try {
    const userId = req.user.userId; // From JWT token

    // Get user with settings
    const [users] = await pool.query(
      'SELECT u.id, u.email, u.first_name, u.last_name, u.position, u.phone, u.role, ' +
      'u.department_id, d.name as department_name, u.created_at, u.last_login, ' +
      'us.language, us.timezone, us.notifications, us.preferences ' +
      'FROM users u ' +
      'LEFT JOIN user_settings us ON u.id = us.user_id ' +
      'LEFT JOIN departments d ON u.department_id = d.id ' +
      'WHERE u.id = ?',
      [userId]
    );

    if (users.length === 0) {
      return res.status(404).json({ 
        status: 'error',
        error: 'Пользователь не найден' 
      });
    }

    const user = users[0];

    // Return user data (without password)
    const userData = {
      id: user.id,
      email: user.email,
      firstName: user.first_name,
      lastName: user.last_name,
      position: user.position,
      phone: user.phone,
      role: user.role,
      department: {
        id: user.department_id,
        name: user.department_name
      },
      createdAt: user.created_at,
      lastLogin: user.last_login,
      settings: {
        language: user.language || 'kk',
        timezone: user.timezone || 'asia-almaty',
        notifications: user.notifications || {},
        preferences: user.preferences || {}
      }
    };

    return res.status(200).json({
      status: 'success',
      user: userData
    });
  } catch (error) {
    console.error('Get profile error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера' 
    });
  }
};

/**
 * Update user profile (name, position, phone)
 */
exports.updateProfile = async (req, res) => {
  try {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { firstName, lastName, position, phone } = req.body;
    const userId = req.user.userId; // From JWT token

    // Update user
    await pool.query(
      'UPDATE users SET first_name = ?, last_name = ?, position = ?, phone = ?, updated_at = NOW() WHERE id = ?',
      [firstName, lastName, position, phone, userId]
    );

    // Return success
    return res.status(200).json({
      status: 'success',
      message: 'Профиль успешно обновлен'
    });
  } catch (error) {
    console.error('Update profile error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера' 
    });
  }
};

/**
 * Update user settings (language, timezone, notifications, preferences)
 */
exports.updateSettings = async (req, res) => {
  try {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { language, timezone, notifications, preferences } = req.body;
    const userId = req.user.userId; // From JWT token

    // Check if settings exist for the user
    const [settingsResult] = await pool.query(
      'SELECT id FROM user_settings WHERE user_id = ?',
      [userId]
    );

    if (settingsResult.length === 0) {
      // Create new settings
      await pool.query(
        'INSERT INTO user_settings (user_id, language, timezone, notifications, preferences) ' +
        'VALUES (?, ?, ?, ?, ?)',
        [userId, language, timezone, JSON.stringify(notifications), JSON.stringify(preferences)]
      );
    } else {
      // Update existing settings
      await pool.query(
        'UPDATE user_settings SET language = ?, timezone = ?, notifications = ?, preferences = ?, updated_at = NOW() ' +
        'WHERE user_id = ?',
        [language, timezone, JSON.stringify(notifications), JSON.stringify(preferences), userId]
      );
    }

    // Return success
    return res.status(200).json({
      status: 'success',
      message: 'Настройки успешно обновлены'
    });
  } catch (error) {
    console.error('Update settings error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера'
    });
  }
};

/**
 * Admin: Create a new user with any role
 * Only accessible by admins
 */
exports.createUser = async (req, res) => {
  try {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    // Check if requester is admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({ 
        status: 'error',
        error: 'Запрещено: Только администраторы могут создавать пользователей' 
      });
    }

    const { 
      email, password, firstName, lastName, position, 
      phone, role, departmentId, isActive, language 
    } = req.body;

    // Validate role
    const validRoles = ['admin', 'moderator', 'staff'];
    if (!validRoles.includes(role)) {
      return res.status(400).json({ 
        status: 'error',
        error: 'Неверная роль' 
      });
    }

    // Check if user already exists
    const [userExists] = await pool.query(
      'SELECT id FROM users WHERE email = ?',
      [email]
    );

    if (userExists.length > 0) {
      return res.status(400).json({ 
        status: 'error',
        error: 'Пользователь с таким email уже существует' 
      });
    }

    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Begin transaction
    const connection = await pool.getConnection();
    
    try {
      await connection.beginTransaction();
      
      // Insert new user
      const [result] = await connection.query(
        'INSERT INTO users (email, password, first_name, last_name, position, phone, role, department_id, is_active) ' +
        'VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
        [email, hashedPassword, firstName, lastName, position, phone, role, departmentId, isActive !== false]
      );
      
      const userId = result.insertId;
      
      // Insert user settings
      await connection.query(
        'INSERT INTO user_settings (user_id, language) VALUES (?, ?)',
        [userId, language || 'kk']
      );
      
      await connection.commit();
      
      // Return success
      return res.status(201).json({
        status: 'success',
        message: 'Пользователь успешно создан',
        userId
      });
    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('Create user error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера'
    });
  }
};

/**
 * Admin: Update user role
 * Only accessible by admins
 */
exports.updateUserRole = async (req, res) => {
  try {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    // Check if requester is admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({ 
        status: 'error',
        error: 'Запрещено: Только администраторы могут изменять роли пользователей' 
      });
    }

    const { userId, role } = req.body;

    // Validate role
    const validRoles = ['admin', 'moderator', 'staff'];
    if (!validRoles.includes(role)) {
      return res.status(400).json({ 
        status: 'error',
        error: 'Неверная роль' 
      });
    }

    // Check if user exists
    const [userResult] = await pool.query(
      'SELECT id FROM users WHERE id = ?',
      [userId]
    );

    if (userResult.length === 0) {
      return res.status(404).json({ 
        status: 'error',
        error: 'Пользователь не найден' 
      });
    }

    // Update user role
    await pool.query(
      'UPDATE users SET role = ?, updated_at = NOW() WHERE id = ?',
      [role, userId]
    );

    // Return success
    return res.status(200).json({
      status: 'success',
      message: 'Роль пользователя успешно обновлена'
    });
  } catch (error) {
    console.error('Update user role error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера'
    });
  }
};

/**
 * Admin: Activate/deactivate user
 * Only accessible by admins
 */
exports.setUserStatus = async (req, res) => {
  try {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    // Check if requester is admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({ 
        status: 'error',
        error: 'Запрещено: Только администраторы могут изменять статус пользователей' 
      });
    }

    const { userId, isActive } = req.body;

    // Check if user exists
    const [userResult] = await pool.query(
      'SELECT id FROM users WHERE id = ?',
      [userId]
    );

    if (userResult.length === 0) {
      return res.status(404).json({ 
        status: 'error',
        error: 'Пользователь не найден' 
      });
    }

    // Update user status
    await pool.query(
      'UPDATE users SET is_active = ?, updated_at = NOW() WHERE id = ?',
      [isActive, userId]
    );

    // Return success
    return res.status(200).json({
      status: 'success',
      message: `Пользователь успешно ${isActive ? 'активирован' : 'деактивирован'}`
    });
  } catch (error) {
    console.error('Update user status error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера'
    });
  }
};

/**
 * Admin: Reset password (admin only)
 */
exports.resetPassword = async (req, res) => {
  try {
    // Validate request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    // Check if requester is admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({ 
        status: 'error',
        error: 'Запрещено: Только администраторы могут сбрасывать пароли' 
      });
    }

    const { userId, newPassword } = req.body;

    // Check if user exists
    const [userResult] = await pool.query(
      'SELECT id FROM users WHERE id = ?',
      [userId]
    );

    if (userResult.length === 0) {
      return res.status(404).json({ 
        status: 'error',
        error: 'Пользователь не найден' 
      });
    }

    // Hash new password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    // Update password
    await pool.query(
      'UPDATE users SET password = ?, updated_at = NOW() WHERE id = ?',
      [hashedPassword, userId]
    );

    // Return success
    return res.status(200).json({
      status: 'success',
      message: 'Пароль успешно сброшен'
    });
  } catch (error) {
    console.error('Reset password error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера'
    });
  }
};

/**
 * Get all users (admin/moderator only)
 */
exports.getUsers = async (req, res) => {
  try {
    // Check if requester has admin or moderator role
    if (!['admin', 'moderator'].includes(req.user.role)) {
      return res.status(403).json({ 
        status: 'error',
        error: 'Запрещено: Недостаточно прав для просмотра пользователей'
      });
    }

    const [users] = await pool.query(
      'SELECT u.id, u.email, u.first_name, u.last_name, u.position, u.phone, u.role, ' +
      'u.department_id, d.name as department_name, u.is_active, u.created_at, u.last_login, ' +
      'us.language ' +
      'FROM users u ' +
      'LEFT JOIN user_settings us ON u.id = us.user_id ' +
      'LEFT JOIN departments d ON u.department_id = d.id ' +
      'ORDER BY u.id DESC'
    );

    return res.status(200).json({
      status: 'success',
      users
    });
  } catch (error) {
    console.error('Get users error:', error);
    return res.status(500).json({ 
      status: 'error',
      error: 'Внутренняя ошибка сервера'
    });
  }
};