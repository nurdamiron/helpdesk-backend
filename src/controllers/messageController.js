// src/controllers/messageController.js
const pool = require('../config/database');
const nodemailer = require('nodemailer');
require('dotenv').config();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º transporter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—è–≤–∫–∏
exports.getTicketMessages = async (req, res) => {
  try {
    const { ticketId } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const [tickets] = await pool.query('SELECT * FROM tickets WHERE id = ?', [ticketId]);
    if (tickets.length === 0) {
      return res.status(404).json({ 
        status: 'error', 
        error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const [messages] = await pool.query(`
      SELECT 
        tm.*,
        CASE 
          WHEN tm.sender_type='requester' THEN r.full_name
          WHEN tm.sender_type='staff' THEN u.first_name
          ELSE 'Unknown'
        END as sender_name,
        CASE
          WHEN tm.sender_type='requester' THEN r.email
          WHEN tm.sender_type='staff' THEN u.email
          ELSE NULL
        END as sender_email
      FROM ticket_messages tm
      LEFT JOIN requesters r ON (tm.sender_type='requester' AND tm.sender_id = r.id)
      LEFT JOIN users u ON (tm.sender_type='staff' AND tm.sender_id = u.id)
      WHERE tm.ticket_id = ?
      ORDER BY tm.created_at ASC
    `, [ticketId]);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const [attachments] = await pool.query(`
      SELECT * FROM ticket_attachments 
      WHERE ticket_id = ? AND message_id IS NOT NULL
    `, [ticketId]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
    const messagesWithAttachments = messages.map(message => {
      const messageAttachments = attachments.filter(
        attachment => attachment.message_id === message.id
      );
      
      return {
        ...message,
        sender: {
          id: message.sender_id,
          name: message.sender_name,
          email: message.sender_email,
          type: message.sender_type
        },
        attachments: messageAttachments
      };
    });
    
    return res.json({
      status: 'success',
      messages: messagesWithAttachments
    });
    
  } catch (error) {
    console.error('Error fetching messages:', error);
    return res.status(500).json({
      status: 'error',
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ
exports.addMessage = async (req, res) => {
  try {
    const { ticketId } = req.params;
    const { body, attachments = [], notify_email = false } = req.body;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)
    const sender_type = 'staff';
    const sender_id = req.user?.id || null;
    
    if (!body) {
      return res.status(400).json({ 
        status: 'error', 
        error: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const [tickets] = await pool.query(`
      SELECT t.*, r.email as requester_email, r.full_name as requester_name
      FROM tickets t
      LEFT JOIN requesters r ON t.requester_id = r.id
      WHERE t.id = ?
    `, [ticketId]);
    
    if (tickets.length === 0) {
      return res.status(404).json({ 
        status: 'error', 
        error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }
    
    const ticket = tickets[0];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const [result] = await pool.query(`
      INSERT INTO ticket_messages (
        ticket_id, 
        sender_type, 
        sender_id, 
        content, 
        content_type
      ) VALUES (?, ?, ?, ?, ?)
    `, [ticketId, sender_type, sender_id, body, 'text']);
    
    const messageId = result.insertId;
    
    // –°–≤—è–∑—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (attachments.length > 0) {
      for (const attachmentId of attachments) {
        await pool.query(`
          UPDATE ticket_attachments 
          SET message_id = ? 
          WHERE id = ? AND ticket_id = ?
        `, [messageId, attachmentId, ticketId]);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    await pool.query(`
      UPDATE tickets 
      SET updated_at = CURRENT_TIMESTAMP 
      WHERE id = ?
    `, [ticketId]);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    const [newMessage] = await pool.query(`
      SELECT 
        m.*,
        CASE 
          WHEN m.sender_type='requester' THEN r.full_name
          WHEN m.sender_type='staff' THEN u.first_name
          ELSE 'Unknown'
        END as sender_name,
        CASE
          WHEN m.sender_type='requester' THEN r.email
          WHEN m.sender_type='staff' THEN u.email
          ELSE NULL
        END as sender_email
      FROM ticket_messages m
      LEFT JOIN requesters r ON (m.sender_type='requester' AND m.sender_id = r.id)
      LEFT JOIN users u ON (m.sender_type='staff' AND m.sender_id = u.id)
      WHERE m.id = ?
    `, [messageId]);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const [messageAttachments] = await pool.query(`
      SELECT * FROM ticket_attachments 
      WHERE message_id = ?
    `, [messageId]);
    
    const message = {
      ...newMessage[0],
      sender: {
        id: newMessage[0].sender_id,
        name: newMessage[0].sender_name,
        email: newMessage[0].sender_email,
        type: newMessage[0].sender_type
      },
      attachments: messageAttachments
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email –∑–∞—è–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (notify_email && ticket.requester_email) {
      try {
        await sendMessageNotification(
          ticket, 
          message, 
          messageAttachments
        );
      } catch (emailError) {
        console.error('Error sending email notification:', emailError);
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      }
    }
    
    return res.status(201).json({
      status: 'success',
      message
    });
    
  } catch (error) {
    console.error('Error adding message:', error);
    return res.status(500).json({
      status: 'error',
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email
async function sendMessageNotification(ticket, message, attachments = []) {
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞—è–≤–∫–µ
  const ticketUrl = `${process.env.FRONTEND_URL || 'https://helpdesk.example.com'}/tickets/${ticket.id}`;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –ø–∏—Å—å–º–∞
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #333;
          margin: 0;
          padding: 0;
        }
        .container {
          max-width: 600px;
          margin: 0 auto;
          padding: 20px;
          background-color: #f8f9fa;
        }
        .header {
          background: linear-gradient(135deg, #0066cc, #004d99);
          color: white;
          padding: 30px;
          text-align: center;
          border-radius: 5px 5px 0 0;
        }
        .content {
          background: white;
          padding: 30px;
          border-radius: 0 0 5px 5px;
          box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .message {
          background-color: #f5f5f5;
          border-left: 4px solid #0066cc;
          padding: 15px;
          margin: 15px 0;
        }
        .button {
          display: inline-block;
          padding: 12px 25px;
          background: #0066cc;
          color: white;
          text-decoration: none;
          border-radius: 4px;
          font-weight: 600;
        }
        .footer {
          text-align: center;
          margin-top: 30px;
          color: #666;
          font-size: 12px;
        }
        .attachment {
          background-color: #f8f9fa;
          border: 1px solid #e0e0e0;
          border-radius: 4px;
          padding: 10px;
          margin: 10px 0;
          display: inline-block;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>Helpdesk</h1>
          <p>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
        </div>
        <div class="content">
          <h2>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ</h2>
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ticket.requester_name || '—É–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç'}!</p>
          <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ <strong>#${ticket.id}: ${ticket.subject}</strong>.</p>
          
          <div class="message">
            <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.sender.name || '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏'}:</strong></p>
            <p>${message.content}</p>
            
            ${attachments.length > 0 ? 
              `<p><strong>–í–ª–æ–∂–µ–Ω–∏—è:</strong></p>
              <div>
                ${attachments.map(attachment => `
                  <div class="attachment">
                    <span>üìé ${attachment.file_name}</span>
                  </div>
                `).join('')}
              </div>` : 
              ''
            }
          </div>
          
          <p>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
          <p style="text-align: center;">
            <a href="${ticketUrl}" class="button">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ</a>
          </p>
          
          <p>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.</p>
          
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
        </div>
        <div class="footer">
          <p>¬© ${new Date().getFullYear()} Helpdesk. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é.</p>
        </div>
      </div>
    </body>
    </html>
  `;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Å—å–º–∞
  const mailOptions = {
    from: `"–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏" <${process.env.EMAIL_USER}>`,
    to: ticket.requester_email,
    subject: `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞—è–≤–∫–µ #${ticket.id}`,
    html: html
  };
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
  await transporter.sendMail(mailOptions);
}

// –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
exports.markMessagesAsRead = async (req, res) => {
  try {
    const { ticketId } = req.params;
    const userId = req.user?.id;
    
    if (!userId) {
      return res.status(400).json({
        status: 'error',
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
    await pool.query(`
      UPDATE ticket_messages
      SET read_at = CURRENT_TIMESTAMP
      WHERE ticket_id = ? 
      AND sender_type = 'requester'
      AND read_at IS NULL
    `, [ticketId]);
    
    return res.json({
      status: 'success',
      message: '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ'
    });
    
  } catch (error) {
    console.error('Error marking messages as read:', error);
    return res.status(500).json({
      status: 'error',
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ
exports.uploadAttachment = async (req, res) => {
  try {
    const { ticketId } = req.params;
    
    if (!req.file) {
      return res.status(400).json({
        status: 'error',
        error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const [tickets] = await pool.query('SELECT * FROM tickets WHERE id = ?', [ticketId]);
    if (tickets.length === 0) {
      return res.status(404).json({
        status: 'error',
        error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    const { filename, path, mimetype, size } = req.file;
    const userId = req.user?.id;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
    const [result] = await pool.query(`
      INSERT INTO ticket_attachments (
        ticket_id,
        file_name,
        file_path,
        file_type,
        file_size,
        uploaded_by
      ) VALUES (?, ?, ?, ?, ?, ?)
    `, [ticketId, filename, path, mimetype, size, userId]);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è
    const [attachment] = await pool.query('SELECT * FROM ticket_attachments WHERE id = ?', [result.insertId]);
    
    if (attachment.length === 0) {
      return res.status(500).json({
        status: 'error',
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏—è'
      });
    }
    
    return res.status(201).json({
      status: 'success',
      attachment: attachment[0]
    });
    
  } catch (error) {
    console.error('Error uploading attachment:', error);
    return res.status(500).json({
      status: 'error',
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};