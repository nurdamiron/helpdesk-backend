/**
 * Database Connection Pool Service
 * Manages database connections for the application
 */

const isTestEnvironment = process.env.NODE_ENV === 'test';

let poolModule;

if (isTestEnvironment) {
  // Mock for tests
  poolModule = {
    query: jest.fn().mockImplementation(() => Promise.resolve([[{}, {}], null])),
    getConnection: jest.fn().mockImplementation(() => {
      return Promise.resolve({
        query: jest.fn().mockImplementation(() => Promise.resolve([[{}, {}], null])),
        beginTransaction: jest.fn().mockImplementation(() => Promise.resolve()),
        commit: jest.fn().mockImplementation(() => Promise.resolve()),
        rollback: jest.fn().mockImplementation(() => Promise.resolve()),
        release: jest.fn()
      });
    }),
    testConnection: jest.fn().mockImplementation(() => Promise.resolve(true))
  };
} else {
  // Real connection for production and development
  const { Pool } = require('pg');
  
  try {
    // Load database configuration from config file
    const config = require('../config/database');
    
    // Create PostgreSQL connection pool
    const pool = new Pool({
      host: process.env.DB_HOST || config.host || 'localhost',
      port: process.env.DB_PORT || config.port || 5432,
      database: process.env.DB_NAME || config.database || 'helpdesk',
      user: process.env.DB_USER || config.user || 'postgres',
      password: process.env.DB_PASSWORD || config.password || 'postgres',
      ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,
      max: 20,  // Maximum number of clients in the pool
      idleTimeoutMillis: 30000,  // How long a client is allowed to remain idle before being closed
      connectionTimeoutMillis: 2000,  // How long to wait when connecting a new client
    });
    
    // Test connection on startup
    pool.connect()
      .then(client => {
        console.log('✓ PostgreSQL database connection established successfully');
        client.release();
      })
      .catch(err => {
        console.error('✗ PostgreSQL database connection error:', err.message);
      });
    
    // Handle errors
    pool.on('error', (err, client) => {
      console.error('Unexpected error on idle client', err);
    });
    
    // Add methods to wrap original pool
    poolModule = {
      query: (text, params) => pool.query(text, params),
      getConnection: () => pool.connect(),
      testConnection: async () => {
        let client;
        try {
          client = await pool.connect();
          return true;
        } catch (error) {
          console.error('Database connection test failed:', error);
          return false;
        } finally {
          if (client) client.release();
        }
      }
    };
  } catch (error) {
    console.error('Failed to initialize database pool:', error);
    throw error;
  }
}

module.exports = poolModule;