const TelegramBot = require('node-telegram-bot-api');
const pool = require('../../config/database');
const { sendTicketCreationNotification } = require('../../utils/emailService');

class HelpdeskTelegramBot {
  constructor() {
    this.token = process.env.TELEGRAM_BOT_TOKEN;
    if (!this.token) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    this.bot = new TelegramBot(this.token, { polling: true });
    this.userStates = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.adminChatIds = [];
    this.moderatorChatIds = [];
    
    this.setupHandlers();
    this.loadAdminList();
    
    console.log('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/start(.*)/, (msg, match) => this.handleStart(msg, match));
    this.bot.onText(/\/help/, (msg) => this.handleHelp(msg));
    this.bot.onText(/\/status (.+)/, (msg, match) => this.handleStatus(msg, match));
    this.bot.onText(/\/mytickets/, (msg) => this.handleMyTickets(msg));
    this.bot.onText(/\/cancel/, (msg) => this.handleCancel(msg));
    
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    this.bot.onText(/\/register (.+)/, (msg, match) => this.handleAdminRegister(msg, match));
    this.bot.onText(/\/stats/, (msg) => this.handleAdminStats(msg));
    this.bot.onText(/\/active/, (msg) => this.handleShowActiveTickets(msg));
    
    // Callback queries (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)
    this.bot.on('callback_query', (query) => this.handleCallbackQuery(query));
    
    // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', (msg) => {
      if (!msg.text || msg.text.startsWith('/')) return;
      this.handleMessage(msg);
    });
    
    // –§–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    this.bot.on('photo', (msg) => this.handlePhoto(msg));
    this.bot.on('document', (msg) => this.handleDocument(msg));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      console.error('Telegram polling error:', error);
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  async loadAdminList() {
    try {
      const [admins] = await pool.query(
        `SELECT telegram_chat_id, role, first_name, last_name 
         FROM users 
         WHERE role IN ('admin', 'moderator') 
         AND telegram_chat_id IS NOT NULL 
         AND is_active = 1`
      );

      this.adminChatIds = admins
        .filter(u => u.role === 'admin')
        .map(u => u.telegram_chat_id);
        
      this.moderatorChatIds = admins
        .filter(u => u.role === 'moderator')
        .map(u => u.telegram_chat_id);

      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.adminChatIds.length} –∞–¥–º–∏–Ω–æ–≤ –∏ ${this.moderatorChatIds.length} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
    }
  }

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
  async handleStart(msg, match) {
    const chatId = msg.chat.id;
    const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start
    if (match && match[1] && match[1].trim()) {
      // –≠—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ URL
      const encodedData = match[1].trim();
      try {
        const decodedMessage = decodeURIComponent(encodedData);
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
        await this.handleQuickTicket({ ...msg, text: decodedMessage });
        return;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏:', error);
      }
    }
    
    const welcomeText = `
üèóÔ∏è *“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑, ${userName}!*
_–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ê–ª–∞—Ç–∞—É –°—Ç—Ä–æ–π –ò–Ω–≤–µ—Å—Ç_

–ú–µ–Ω —Å—ñ–∑–≥–µ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω.
_–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏._

üìã *–ù–µ —ñ—Å—Ç–µ–π –∞–ª–∞—Å—ã–∑ / –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É / –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
‚Ä¢ ”®—Ç—ñ–Ω—ñ—à –∫“Ø–π—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
‚Ä¢ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä / –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—É / –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

–¢”©–º–µ–Ω–¥–µ –ø”ô—Ä–º–µ–Ω–¥–µ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:
_–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:_`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à / –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', callback_data: 'new_ticket' }
        ],
        [
          { text: 'üìä –ú–µ–Ω—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ–º / –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'my_tickets' },
          { text: 'üîç –ö“Ø–π–¥—ñ —Ç–µ–∫—Å–µ—Ä—É / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'check_status' }
        ],
        [
          { text: '‚ùì –ö”©–º–µ–∫ / –ü–æ–º–æ—â—å', callback_data: 'help' },
          { text: '‚òéÔ∏è –ë–∞–π–ª–∞–Ω—ã—Å / –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, welcomeText, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
  async handleCallbackQuery(query) {
    const chatId = query.message.chat.id;
    const data = query.data;

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await this.bot.answerCallbackQuery(query.id);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (data.startsWith('admin_')) {
      await this.handleAdminCallback(query);
      return;
    }

    switch (data) {
      case 'new_ticket':
        await this.startTicketCreation(chatId);
        break;
      case 'my_tickets':
        await this.showMyTickets(chatId, query.from.id);
        break;
      case 'check_status':
        await this.askForTicketId(chatId);
        break;
      case 'help':
        await this.showHelp(chatId);
        break;
      case 'contacts':
        await this.showContacts(chatId);
        break;
      default:
        if (data.startsWith('priority_')) {
          await this.selectPriority(chatId, data.replace('priority_', ''));
        }
    }
  }

  // –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
  async startTicketCreation(chatId) {
    this.userStates.set(chatId, {
      step: 'awaiting_name',
      ticketData: {}
    });

    const text = `
üìù *–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É / –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*

–°“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑:
_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:_

1Ô∏è‚É£ *–ê—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑ / –í–∞—à–µ –§–ò–û:*`;

    await this.bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  async handleMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userState = this.userStates.get(chatId);

    if (!userState) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞
      await this.handleQuickTicket(msg);
      return;
    }

    switch (userState.step) {
      case 'awaiting_name':
        userState.ticketData.name = text;
        userState.step = 'awaiting_email';
        await this.bot.sendMessage(chatId, '2Ô∏è‚É£ *Email –º–µ–∫–µ–Ω–∂–∞–π—ã“£—ã–∑ / –í–∞—à email:*', { parse_mode: 'Markdown' });
        break;

      case 'awaiting_email':
        if (!this.validateEmail(text)) {
          await this.bot.sendMessage(chatId, '‚ùå –î“±—Ä—ã—Å email –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ / –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
          return;
        }
        userState.ticketData.email = text;
        userState.step = 'awaiting_phone';
        await this.bot.sendMessage(chatId, '3Ô∏è‚É£ *–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑ / –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:*\n_(–º—ñ–Ω–¥–µ—Ç—Ç—ñ –µ–º–µ—Å / –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω "-" –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ / –≤–≤–µ–¥–∏—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)_', { parse_mode: 'Markdown' });
        break;

      case 'awaiting_phone':
        if (text !== '-' && text !== '–∂–æ“õ' && text !== '–Ω–µ—Ç') {
          userState.ticketData.phone = text;
        }
        userState.step = 'awaiting_subject';
        await this.bot.sendMessage(chatId, '4Ô∏è‚É£ *”®—Ç—ñ–Ω—ñ—à —Ç–∞“õ—ã—Ä—ã–±—ã / –¢–µ–º–∞ –∑–∞—è–≤–∫–∏:*', { parse_mode: 'Markdown' });
        break;

      case 'awaiting_subject':
        userState.ticketData.subject = text;
        userState.step = 'awaiting_description';
        await this.bot.sendMessage(chatId, '5Ô∏è‚É£ *–ú”ô—Å–µ–ª–µ–Ω—ñ —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑ / –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:*', { parse_mode: 'Markdown' });
        break;

      case 'awaiting_description':
        userState.ticketData.description = text;
        userState.step = 'awaiting_priority';
        await this.showPrioritySelection(chatId);
        break;

      case 'awaiting_confirmation':
        if (text.toLowerCase() === '–∏”ô' || text.toLowerCase() === '–¥–∞') {
          await this.createTicket(chatId, userState.ticketData, msg.from.id);
        } else {
          await this.bot.sendMessage(chatId, '‚ùå ”®—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É–¥–∞–Ω –±–∞—Å —Ç–∞—Ä—Ç—ã–ª–¥—ã / –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
          this.userStates.delete(chatId);
        }
        break;

      case 'awaiting_ticket_id':
        await this.checkTicketStatus(chatId, text);
        this.userStates.delete(chatId);
        break;
    }

    this.userStates.set(chatId, userState);
  }

  // –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async showCategorySelection(chatId) {
    const categories = [
      { id: 'it_support', name: 'üÜò IT “õ–æ–ª–¥–∞—É / IT –ø–æ–¥–¥–µ—Ä–∂–∫–∞' },
      { id: 'equipment_issue', name: 'üîß “ö“±—Ä—ã–ª“ì—ã –º”ô—Å–µ–ª–µ—Å—ñ / –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º' },
      { id: 'software_issue', name: 'üñ•Ô∏è –ë“ö –º”ô—Å–µ–ª–µ—Å—ñ / –ü—Ä–æ–±–ª–µ–º—ã —Å –ü–û' },
      { id: 'access_request', name: 'üîê –†“±“õ—Å–∞—Ç —Å“±—Ä–∞—É / –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞' },
      { id: 'other', name: 'üìã –ë–∞—Å“õ–∞ / –î—Ä—É–≥–æ–µ' }
    ];

    const keyboard = {
      inline_keyboard: categories.map(cat => [{
        text: cat.name,
        callback_data: `category_${cat.id}`
      }])
    };

    await this.bot.sendMessage(chatId, '4Ô∏è‚É£ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*', {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async selectCategory(chatId, categoryId) {
    const userState = this.userStates.get(chatId);
    if (!userState) return;

    userState.ticketData.category = categoryId;
    userState.step = 'awaiting_subject';
    
    await this.bot.sendMessage(chatId, '5Ô∏è‚É£ *”®—Ç—ñ–Ω—ñ—à —Ç–∞“õ—ã—Ä—ã–±—ã / –¢–µ–º–∞ –∑–∞—è–≤–∫–∏:*', { parse_mode: 'Markdown' });
  }

  // –ü–æ–∫–∞–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
  async showPrioritySelection(chatId) {
    const priorities = [
      { id: 'low', name: 'üü¢ –¢”©–º–µ–Ω / –ù–∏–∑–∫–∏–π' },
      { id: 'medium', name: 'üü° –û—Ä—Ç–∞—à–∞ / –°—Ä–µ–¥–Ω–∏–π' },
      { id: 'high', name: 'üü† –ñ–æ“ì–∞—Ä—ã / –í—ã—Å–æ–∫–∏–π' },
      { id: 'urgent', name: 'üî¥ –®“±“ì—ã–ª / –°—Ä–æ—á–Ω—ã–π' }
    ];

    const keyboard = {
      inline_keyboard: priorities.map(priority => [{
        text: priority.name,
        callback_data: `priority_${priority.id}`
      }])
    };

    await this.bot.sendMessage(chatId, '6Ô∏è‚É£ *–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:*', {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  async selectPriority(chatId, priorityId) {
    const userState = this.userStates.get(chatId);
    if (!userState) return;

    userState.ticketData.priority = priorityId;
    userState.step = 'awaiting_confirmation';
    
    await this.showTicketSummary(chatId, userState.ticketData);
  }

  // –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  async showTicketSummary(chatId, ticketData) {
    const summary = `
‚úÖ *”®—Ç—ñ–Ω—ñ—à –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ / –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*

üë§ *–ê—Ç—ã-–∂”©–Ω—ñ / –§–ò–û:* ${ticketData.name}
üìß *Email:* ${ticketData.email}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${ticketData.phone || '–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω / –ù–µ —É–∫–∞–∑–∞–Ω'}
üìã *–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:* ${ticketData.subject}
üìù *–°–∏–ø–∞—Ç—Ç–∞–º–∞ / –û–ø–∏—Å–∞–Ω–∏–µ:* 
${ticketData.description}
‚ö° *–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityName(ticketData.priority)}

*–†–∞—Å—Ç–∞–π—Å—ã–∑ –±–∞? / –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?*
–ñ–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑: *–ò”ô/–î–∞* –Ω–µ–º–µ—Å–µ *–ñ–æ“õ/–ù–µ—Ç*`;

    await this.bot.sendMessage(chatId, summary, { parse_mode: 'Markdown' });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
  async createTicket(chatId, ticketData, telegramUserId) {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
      const [result] = await pool.query(
        `INSERT INTO tickets (subject, description, type, priority, status, metadata, requester_metadata, user_id) 
         VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          ticketData.subject,
          ticketData.description,
          'support_request',
          ticketData.priority,
          'new',
          JSON.stringify({
            source: 'telegram',
            telegram_chat_id: chatId,
            telegram_user_id: telegramUserId
          }),
          JSON.stringify({
            name: ticketData.name,
            email: ticketData.email,
            phone: ticketData.phone
          }),
          null
        ]
      );

      const ticketId = result.insertId;

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
      const [ticketRows] = await pool.query('SELECT * FROM tickets WHERE id = ?', [ticketId]);
      const ticket = ticketRows[0];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (ticketData.email) {
        await sendTicketCreationNotification(ticketData.email, ticket);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram
      const successMessage = `
‚úÖ *”®—Ç—ñ–Ω—ñ—à —Å”ô—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª–¥—ñ! / –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*

üé´ *”®—Ç—ñ–Ω—ñ—à –Ω”©–º—ñ—Ä—ñ / –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #${ticketId}
üìß *Email-–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ / –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email*

”®—Ç—ñ–Ω—ñ—à –∫“Ø–π—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω:
_–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:_
/status ${ticketId}

üí¨ *“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞, –±—ñ–∑ —Å—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞–º—ã–∑*
_–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏_`;

      await this.bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.notifyAdminsNewTicket(ticket, ticketData);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.userStates.delete(chatId);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    }
  }

  // –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å frontend)
  async handleQuickTicket(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (text.includes('–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í –°–õ–£–ñ–ë–£ –ü–û–î–î–ï–†–ñ–ö–ò') || text.includes('–ñ–ê“¢–ê ”®–¢–Ü–ù–Ü–®')) {
      try {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        const ticketData = this.parseTicketMessage(text);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        await this.createTicketFromParsedData(chatId, ticketData, msg.from.id);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏:', error);
        await this.startTicketCreation(chatId);
      }
    } else {
      // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
      await this.bot.sendMessage(chatId, 
        '–°—ñ–∑ –∂–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ –º–µ? / –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?\n\n' +
        '“Æ—à—ñ–Ω /start –±–∞—Å—ã“£—ã–∑ / –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞'
      );
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  parseTicketMessage(text) {
    const data = {};
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    const patterns = {
      name: /(?:–°–æ—Ç—Ä—É–¥–Ω–∏–∫|“ö—ã–∑–º–µ—Ç–∫–µ—Ä):\s*(.+?)(?:\n|$)/,
      email: /Email:\s*(.+?)(?:\n|$)/,
      phone: /(?:–¢–µ–ª–µ—Ñ–æ–Ω|–¢–µ–ª–µ—Ñ–æ–Ω):\s*(.+?)(?:\n|$)/,
      subject: /(?:–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è|”®—Ç—ñ–Ω—ñ—à —Ç–∞“õ—ã—Ä—ã–±—ã):\s*(.+?)(?:\n|$)/,
      type: /(?:–¢–∏–ø –∑–∞—è–≤–∫–∏|”®—Ç—ñ–Ω—ñ—à —Ç“Ø—Ä—ñ):\s*(.+?)(?:\n|$)/,
      priority: /(?:–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç|–ë–∞—Å—ã–º–¥—ã–ª—ã“õ):\s*(.+?)(?:\n|$)/,
      description: /(?:–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã|–ú”ô—Å–µ–ª–µ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã):\s*([\s\S]+?)(?:\n\n|$)/
    };

    for (const [key, pattern] of Object.entries(patterns)) {
      const match = text.match(pattern);
      if (match) {
        data[key] = match[1].trim();
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (data.priority) {
      const priorityMap = {
        '–ù–∏–∑–∫–∏–π': 'low',
        '–¢”©–º–µ–Ω': 'low',
        '–°—Ä–µ–¥–Ω–∏–π': 'medium',
        '–û—Ä—Ç–∞—à–∞': 'medium',
        '–í—ã—Å–æ–∫–∏–π': 'high',
        '–ñ–æ“ì–∞—Ä—ã': 'high',
        '–°—Ä–æ—á–Ω—ã–π': 'urgent',
        '–®“±“ì—ã–ª': 'urgent'
      };
      data.priority = priorityMap[data.priority] || 'medium';
    }

    return data;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async createTicketFromParsedData(chatId, ticketData, telegramUserId) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É
      const [pendingTickets] = await pool.query(
        `SELECT id FROM tickets 
         WHERE status = 'telegram_pending' 
         AND JSON_EXTRACT(metadata, '$.communicationChannel') = 'telegram'
         AND created_at >= DATE_SUB(NOW(), INTERVAL 5 MINUTE)
         ORDER BY created_at DESC LIMIT 1`
      );

      let ticketId;
      
      if (pendingTickets.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
        ticketId = pendingTickets[0].id;
        await pool.query(
          `UPDATE tickets 
           SET status = 'new',
               metadata = JSON_SET(metadata, 
                 '$.telegram_chat_id', ?,
                 '$.telegram_user_id', ?,
                 '$.telegram_confirmed', true
               )
           WHERE id = ?`,
          [chatId, telegramUserId, ticketId]
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        const [result] = await pool.query(
          `INSERT INTO tickets (subject, description, type, priority, status, metadata, requester_metadata) 
           VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            ticketData.subject || '–ó–∞—è–≤–∫–∞ –∏–∑ Telegram',
            ticketData.description || ticketData.subject,
            'support_request',
            ticketData.priority || 'medium',
            'new',
            JSON.stringify({
              source: 'telegram',
              telegram_chat_id: chatId,
              telegram_user_id: telegramUserId
            }),
            JSON.stringify({
              name: ticketData.name,
              email: ticketData.email,
              phone: ticketData.phone
            })
          ]
        );
        ticketId = result.insertId;
      }

      const confirmMessage = `
‚úÖ *”®—Ç—ñ–Ω—ñ—à “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! / –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*

üé´ *”®—Ç—ñ–Ω—ñ—à –Ω”©–º—ñ—Ä—ñ / –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #${ticketId}
üìß *Email:* ${ticketData.email}

üìä *–ö“Ø–π / –°—Ç–∞—Ç—É—Å:* –ñ–∞“£–∞ / –ù–æ–≤–∞—è
‚è±Ô∏è *–û—Ä—Ç–∞—à–∞ ”©“£–¥–µ—É —É–∞“õ—ã—Ç—ã / –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:* 2-4 —Å–∞“ì–∞—Ç / —á–∞—Å–∞

_–ë—ñ–∑ —Å—ñ–∑–±–µ–Ω –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ –±–∞–π–ª–∞–Ω—ã—Å–∞–º—ã–∑_
_–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è_

/status ${ticketId} - –∫“Ø–π–¥—ñ —Ç–µ–∫—Å–µ—Ä—É / –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å`;

      await this.bot.sendMessage(chatId, confirmMessage, { parse_mode: 'Markdown' });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      const [tickets] = await pool.query('SELECT * FROM tickets WHERE id = ?', [ticketId]);
      if (tickets.length > 0) {
        await this.notifyAdminsNewTicket(tickets[0], ticketData);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
  async notifyAdminsNewTicket(ticket, ticketData) {
    const priorityEmoji = {
      'low': 'üü¢',
      'medium': 'üü°', 
      'high': 'üü†',
      'urgent': 'üî¥'
    };

    const message = `
${priorityEmoji[ticket.priority]} *–ñ–ê“¢–ê ”®–¢–Ü–ù–Ü–® / –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #${ticket.id}*

üë§ *“ö—ã–∑–º–µ—Ç–∫–µ—Ä / –°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${ticketData.name}
üìß *Email:* ${ticketData.email}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${ticketData.phone || '–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω / –ù–µ —É–∫–∞–∑–∞–Ω'}

üìã *–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:* ${ticket.subject}
‚ö° *–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityName(ticket.priority)}

üìù *–°–∏–ø–∞—Ç—Ç–∞–º–∞ / –û–ø–∏—Å–∞–Ω–∏–µ:*
${ticket.description}

‚è∞ *–£–∞“õ—ã—Ç / –í—Ä–µ–º—è:* ${new Date().toLocaleString('kk-KZ')}
üì± *–ö”©–∑—ñ / –ò—Å—Ç–æ—á–Ω–∏–∫:* Telegram`;

    // Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üëÅ “ö–∞—Ä–∞—É / –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', callback_data: `admin_view_${ticket.id}` },
          { text: '‚úã “ö–∞–±—ã–ª–¥–∞—É / –ü—Ä–∏–Ω—è—Ç—å', callback_data: `admin_take_${ticket.id}` }
        ],
        [
          { text: 'üìä –ë–∞—Ä–ª—ã“õ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä / –í—Å–µ –∑–∞—è–≤–∫–∏', url: `${process.env.FRONTEND_URL || 'http://localhost:5173'}/tickets` }
        ]
      ]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    const allAdmins = [...this.adminChatIds, ...this.moderatorChatIds];
    
    for (const chatId of allAdmins) {
      try {
        await this.bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${chatId}:`, error.message);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async handleAdminCallback(query) {
    const chatId = query.message.chat.id;
    const data = query.data;
    const adminId = query.from.id;

    if (data.startsWith('admin_view_')) {
      const ticketId = data.replace('admin_view_', '');
      await this.showTicketDetailsForAdmin(chatId, ticketId);
      
    } else if (data.startsWith('admin_take_')) {
      const ticketId = data.replace('admin_take_', '');
      await this.assignTicketToAdmin(chatId, ticketId, adminId);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
  async showTicketDetailsForAdmin(chatId, ticketId) {
    try {
      const [tickets] = await pool.query(
        `SELECT t.*, u.email as user_email, u.first_name as user_first_name, u.last_name as user_last_name
         FROM tickets t 
         LEFT JOIN users u ON t.user_id = u.id 
         WHERE t.id = ?`,
        [ticketId]
      );

      if (tickets.length === 0) {
        await this.bot.sendMessage(chatId, `‚ùå ”®—Ç—ñ–Ω—ñ—à #${ticketId} —Ç–∞–±—ã–ª–º–∞–¥—ã / –ó–∞—è–≤–∫–∞ #${ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }

      const ticket = tickets[0];
      let requesterInfo = {};
      
      if (ticket.requester_metadata) {
        try {
          requesterInfo = JSON.parse(ticket.requester_metadata);
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ requester_metadata:', e);
        }
      }

      const statusEmoji = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'pending': '‚è∏Ô∏è',
        'resolved': '‚úÖ',
        'closed': 'üîí'
      };

      const message = `
${statusEmoji[ticket.status] || 'üìã'} *”®–¢–Ü–ù–Ü–® / –ó–ê–Ø–í–ö–ê #${ticketId}*

üë§ *”®—Ç—ñ–Ω—ñ—à –±–µ—Ä—É—à—ñ / –ó–∞—è–≤–∏—Ç–µ–ª—å:* ${requesterInfo.name || '–ë–µ–ª–≥—ñ—Å—ñ–∑ / –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìß *Email:* ${requesterInfo.email || ticket.user_email || '–ñ–æ“õ / –ù–µ—Ç'}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${requesterInfo.phone || '–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω / –ù–µ —É–∫–∞–∑–∞–Ω'}

üìã *–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:* ${ticket.subject}
üìù *–°–∏–ø–∞—Ç—Ç–∞–º–∞ / –û–ø–∏—Å–∞–Ω–∏–µ:*
${ticket.description}

‚ö° *–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityName(ticket.priority)}
üìä *–ö“Ø–π / –°—Ç–∞—Ç—É—Å:* ${this.getStatusName(ticket.status)}

üìÖ *“ö“±—Ä—ã–ª“ì–∞–Ω / –°–æ–∑–¥–∞–Ω–∞:* ${new Date(ticket.created_at).toLocaleString('kk-KZ')}
üîÑ *–ñ–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω / –û–±–Ω–æ–≤–ª–µ–Ω–∞:* ${new Date(ticket.updated_at).toLocaleString('kk-KZ')}

${ticket.assigned_to ? `üë§ *–û—Ä—ã–Ω–¥–∞—É—à—ã / –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ID ${ticket.assigned_to}` : '‚ùó *–û—Ä—ã–Ω–¥–∞—É—à—ã —Ç–∞“ì–∞–π—ã–Ω–¥–∞–ª–º–∞“ì–∞–Ω / –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω*'}`;

      const keyboard = {
        inline_keyboard: [
          ticket.assigned_to ? [] : [{ text: '‚úã “ö–∞–±—ã–ª–¥–∞—É / –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data: `admin_take_${ticketId}` }],
          [
            { text: 'üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—Ç–µ –∞—à—É / –û—Ç–∫—Ä—ã—Ç—å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ', url: `${process.env.FRONTEND_URL || 'http://localhost:5173'}/tickets/${ticketId}` }
          ]
        ].filter(row => row.length > 0)
      };

      await this.bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  async assignTicketToAdmin(chatId, ticketId, adminTelegramId) {
    try {
      // –ù–∞–π–¥–µ–º user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ telegram_id
      const [adminUser] = await pool.query(
        'SELECT id, first_name, last_name FROM users WHERE telegram_chat_id = ?',
        [adminTelegramId]
      );

      if (adminUser.length === 0) {
        await this.bot.sendMessage(chatId, '‚ùå –°—ñ–∑–¥—ñ“£ –∞–∫–∫–∞—É–Ω—Ç—ã“£—ã–∑ —Ç–∞–±—ã–ª–º–∞–¥—ã / –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n–¢—ñ—Ä–∫–µ–ª—É “Ø—à—ñ–Ω / –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: /register [token]');
        return;
      }

      const admin = adminUser[0];

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
      await pool.query(
        'UPDATE tickets SET assigned_to = ?, status = ? WHERE id = ?',
        [admin.id, 'in_progress', ticketId]
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.bot.sendMessage(chatId, 
        `‚úÖ ”®—Ç—ñ–Ω—ñ—à #${ticketId} —Å—ñ–∑–≥–µ —Ç–∞“ì–∞–π—ã–Ω–¥–∞–ª–¥—ã / –ó–∞—è–≤–∫–∞ #${ticketId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å\n` +
        `üë§ ${admin.first_name} ${admin.last_name}`
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É
      await this.notifyUserTicketAssigned(ticketId, admin);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  async notifyUserTicketAssigned(ticketId, admin) {
    try {
      const [tickets] = await pool.query(
        'SELECT metadata FROM tickets WHERE id = ?',
        [ticketId]
      );

      if (tickets.length > 0) {
        const metadata = JSON.parse(tickets[0].metadata);
        if (metadata.telegram_chat_id) {
          const message = `
üì¨ *”®—Ç—ñ–Ω—ñ—à –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã / –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ #${ticketId}*

üë§ *–û—Ä—ã–Ω–¥–∞—É—à—ã —Ç–∞“ì–∞–π—ã–Ω–¥–∞–ª–¥—ã / –ù–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:*
${admin.first_name} ${admin.last_name}

üìä *–ö“Ø–π / –°—Ç–∞—Ç—É—Å:* ”®“£–¥–µ–ª—É–¥–µ / –í —Ä–∞–±–æ—Ç–µ

_–ë—ñ–∑ —Å—ñ–∑–±–µ–Ω –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ –±–∞–π–ª–∞–Ω—ã—Å–∞–º—ã–∑_
_–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è_`;

          await this.bot.sendMessage(metadata.telegram_chat_id, message, {
            parse_mode: 'Markdown'
          });
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async handleAdminRegister(msg, match) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    const username = msg.from.username;

    if (!match || !match[1]) {
      await this.bot.sendMessage(chatId, 
        '–ü–∞–π–¥–∞–ª–∞–Ω—É / –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register [—Ç–æ–∫–µ–Ω]\n' +
        '–¢–æ–∫–µ–Ω–¥—ñ –∂“Ø–π–µ ”ô–∫—ñ–º—à—ñ—Å—ñ–Ω–µ–Ω –∞–ª—ã“£—ã–∑ / –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      );
      return;
    }

    const token = match[1];

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ë–î
      const [users] = await pool.query(
        'SELECT id, role, first_name, last_name FROM users WHERE registration_token = ? AND is_active = 1',
        [token]
      );

      if (users.length === 0) {
        await this.bot.sendMessage(chatId, '‚ùå –ñ–∞—Ä–∞–º—Å—ã–∑ —Ç–æ–∫–µ–Ω / –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
        return;
      }

      const user = users[0];

      // –û–±–Ω–æ–≤–ª—è–µ–º telegram_chat_id
      await pool.query(
        'UPDATE users SET telegram_chat_id = ?, telegram_username = ?, registration_token = NULL WHERE id = ?',
        [telegramId, username, user.id]
      );

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.loadAdminList();

      await this.bot.sendMessage(chatId, 
        `‚úÖ *–¢—ñ—Ä–∫–µ–ª—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n` +
        `üë§ *–ê—Ç—ã-–∂”©–Ω—ñ / –§–ò–û:* ${user.first_name} ${user.last_name}\n` +
        `üîë *–†”©–ª / –†–æ–ª—å:* ${user.role}\n\n` +
        `–ï–Ω–¥—ñ —Å—ñ–∑ –∂–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∞–ª–∞—Å—ã–∑!\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö!`,
        { parse_mode: 'Markdown' }
      );

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
  async handleStatus(msg, match) {
    const chatId = msg.chat.id;
    const ticketId = match[1];
    await this.checkTicketStatus(chatId, ticketId);
  }

  async checkTicketStatus(chatId, ticketId) {
    try {
      const [tickets] = await pool.query(
        `SELECT * FROM tickets WHERE id = ?`,
        [ticketId]
      );

      if (tickets.length === 0) {
        await this.bot.sendMessage(chatId, `‚ùå ”®—Ç—ñ–Ω—ñ—à #${ticketId} —Ç–∞–±—ã–ª–º–∞–¥—ã / –ó–∞—è–≤–∫–∞ #${ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }

      const ticket = tickets[0];
      const statusEmoji = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'pending': '‚è∏Ô∏è',
        'resolved': '‚úÖ',
        'closed': 'üîí'
      };

      const message = `
${statusEmoji[ticket.status] || 'üìã'} *”®—Ç—ñ–Ω—ñ—à #${ticketId}*

üìù *–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:* ${ticket.subject}
üìä *–ö“Ø–π / –°—Ç–∞—Ç—É—Å:* ${this.getStatusName(ticket.status)}
üìÖ *“ö“±—Ä—ã–ª“ì–∞–Ω / –°–æ–∑–¥–∞–Ω–∞:* ${new Date(ticket.created_at).toLocaleString('kk-KZ')}
üîÑ *–ñ–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω / –û–±–Ω–æ–≤–ª–µ–Ω–∞:* ${new Date(ticket.updated_at).toLocaleString('kk-KZ')}

${ticket.assigned_to ? `üë§ *–û—Ä—ã–Ω–¥–∞—É—à—ã / –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ID ${ticket.assigned_to}` : ''}
${ticket.status === 'resolved' ? '\n‚úÖ *–ú”ô—Å–µ–ª–µ —à–µ—à—ñ–ª–¥—ñ / –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞*' : ''}`;

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü–æ–∫–∞–∑ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showMyTickets(chatId, telegramUserId) {
    try {
      const [tickets] = await pool.query(
        `SELECT * FROM tickets 
         WHERE JSON_EXTRACT(metadata, '$.telegram_user_id') = ?
         OR JSON_EXTRACT(metadata, '$.telegram_chat_id') = ?
         ORDER BY created_at DESC
         LIMIT 10`,
        [telegramUserId.toString(), chatId.toString()]
      );

      if (tickets.length === 0) {
        await this.bot.sendMessage(chatId, '–°—ñ–∑–¥–µ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä –∂–æ“õ / –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫');
        return;
      }

      let message = '*üìã –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ“£—ñ–∑ / –í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n\n';
      
      for (const ticket of tickets) {
        const statusEmoji = {
          'new': 'üÜï',
          'in_progress': '‚è≥',
          'pending': '‚è∏Ô∏è',
          'resolved': '‚úÖ',
          'closed': 'üîí'
        }[ticket.status] || 'üìã';

        message += `${statusEmoji} #${ticket.id} - ${ticket.subject}\n`;
        message += `_${new Date(ticket.created_at).toLocaleDateString('ru-RU')}_\n\n`;
      }

      message += '_–ö“Ø–π–¥—ñ —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω / –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:_ /status [–Ω–æ–º–µ—Ä]';

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü–æ–º–æ—â—å
  async showHelp(chatId) {
    const helpText = `
‚ùì *–ö”©–º–µ–∫ / –ü–æ–º–æ—â—å*

üìå *–ù–µ–≥—ñ–∑–≥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä / –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ö”©–º–µ–∫ / –ü–æ–º–æ—â—å
/status [–Ω–æ–º–µ—Ä] - ”®—Ç—ñ–Ω—ñ—à –∫“Ø–π—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
/mytickets - –ú–µ–Ω—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ–º / –ú–æ–∏ –∑–∞—è–≤–∫–∏
/cancel - ”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–æ“õ—Ç–∞—Ç—É / –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ

üìù *”®—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É / –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:*
1. /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ / –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
2. "–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑ / –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
3. –ë–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑ / –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
4. ”®—Ç—ñ–Ω—ñ—à—Ç—ñ —Ä–∞—Å—Ç–∞“£—ã–∑ / –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É

üí° *–ö–µ“£–µ—Å—Ç–µ—Ä / –°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ú”ô—Å–µ–ª–µ–Ω—ñ —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑ / –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—Ç–∞—Ä “õ–æ—Å—ã“£—ã–∑ / –ü—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
‚Ä¢ –î“±—Ä—ã—Å –±–∞–π–ª–∞–Ω—ã—Å –∞“õ–ø–∞—Ä–∞—Ç—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑ / –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã`;

    await this.bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
  }

  // –ö–æ–Ω—Ç–∞–∫—Ç—ã
  async showContacts(chatId) {
    const contactsText = `
‚òéÔ∏è *–ë–∞–π–ª–∞–Ω—ã—Å –∞“õ–ø–∞—Ä–∞—Ç—ã / –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

üè¢ *–ê–ª–∞—Ç–∞—É –°—Ç—Ä–æ–π –ò–Ω–≤–µ—Å—Ç*

üìû *–¢–µ–ª–µ—Ñ–æ–Ω / –¢–µ–ª–µ—Ñ–æ–Ω:*
+7 (727) 355-00-00

üìß *Email:*
it-support@alataustroyinvest.kz

üïê *–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã / –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:*
–î“Ø–π—Å–µ–Ω–±—ñ-–ñ“±–º–∞ / –ü–Ω-–ü—Ç: 8:00 - 18:00
–°–µ–Ω–±—ñ / –°–±: 9:00 - 13:00

üÜò *–¢”ô—É–ª—ñ–∫ –±–æ–π—ã IT “õ–æ–ª–¥–∞—É / –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è IT –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*
+7 (777) 013-1838

üìç *–ú–µ–∫–µ–Ω–∂–∞–π / –ê–¥—Ä–µ—Å:*
“ö–∞–∑–∞“õ—Å—Ç–∞–Ω, –ê–ª–º–∞—Ç—ã “õ., “ö.”ò–∑—ñ—Ä–±–∞–µ–≤ –∫., 161–±
–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ö. –ê–∑–µ—Ä–±–∞–µ–≤–∞, 161–±`;

    await this.bot.sendMessage(chatId, contactsText, { parse_mode: 'Markdown' });
  }

  // –ó–∞–ø—Ä–æ—Å ID –∑–∞—è–≤–∫–∏
  async askForTicketId(chatId) {
    this.userStates.set(chatId, {
      step: 'awaiting_ticket_id'
    });
    
    await this.bot.sendMessage(chatId, 
      'üîç *”®—Ç—ñ–Ω—ñ—à –Ω”©–º—ñ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ / –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:*\n' +
      '_–ú—ã—Å–∞–ª—ã / –ù–∞–ø—Ä–∏–º–µ—Ä: 123_',
      { parse_mode: 'Markdown' }
    );
  }

  // –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  async handleShowActiveTickets(msg) {
    const chatId = msg.chat.id;
    
    if (!this.isAdmin(chatId)) {
      await this.bot.sendMessage(chatId, '‚ùå –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–ª–µ—Ä “Ø—à—ñ–Ω / –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
      return;
    }

    try {
      const [tickets] = await pool.query(
        `SELECT t.*, 
         JSON_UNQUOTE(JSON_EXTRACT(t.requester_metadata, '$.name')) as requester_name
         FROM tickets t 
         WHERE t.status IN ('new', 'in_progress', 'pending')
         ORDER BY 
           CASE t.priority 
             WHEN 'urgent' THEN 1
             WHEN 'high' THEN 2
             WHEN 'medium' THEN 3
             WHEN 'low' THEN 4
           END,
           t.created_at DESC
         LIMIT 20`
      );

      if (tickets.length === 0) {
        await this.bot.sendMessage(chatId, '‚úÖ –ê–∫—Ç–∏–≤ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä –∂–æ“õ / –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫');
        return;
      }

      let message = '*üìã –ê–ö–¢–ò–í ”®–¢–Ü–ù–Ü–®–¢–ï–† / –ê–ö–¢–ò–í–ù–´–ï –ó–ê–Ø–í–ö–ò:*\n\n';
      
      for (const ticket of tickets) {
        const priorityEmoji = {
          'low': 'üü¢',
          'medium': 'üü°',
          'high': 'üü†',
          'urgent': 'üî¥'
        }[ticket.priority] || '‚ö™';

        const statusEmoji = {
          'new': 'üÜï',
          'in_progress': '‚è≥',
          'pending': '‚è∏Ô∏è'
        }[ticket.status] || 'üìã';

        message += `${priorityEmoji} ${statusEmoji} #${ticket.id} - ${ticket.subject}\n`;
        message += `üë§ ${ticket.requester_name || '–ë–µ–ª–≥—ñ—Å—ñ–∑ / –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        message += `_${new Date(ticket.created_at).toLocaleDateString('ru-RU')} ${new Date(ticket.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}_\n\n`;
      }

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  async handleAdminStats(msg) {
    const chatId = msg.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!this.isAdmin(chatId)) {
      await this.bot.sendMessage(chatId, '‚ùå –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–ª–µ—Ä “Ø—à—ñ–Ω / –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const [stats] = await pool.query(`
        SELECT 
          COUNT(*) as total,
          SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
          SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
          SUM(CASE WHEN status = 'resolved' THEN 1 ELSE 0 END) as resolved,
          SUM(CASE WHEN status = 'closed' THEN 1 ELSE 0 END) as closed,
          SUM(CASE WHEN priority = 'urgent' THEN 1 ELSE 0 END) as urgent
        FROM tickets 
        WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
      `);

      const stat = stats[0];

      const message = `
üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 30 –ö“Æ–ù / –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 30 –î–ù–ï–ô*

üìã *–ë–∞—Ä–ª—ã“ì—ã / –í—Å–µ–≥–æ:* ${stat.total}
üÜï *–ñ–∞“£–∞ / –ù–æ–≤—ã—Ö:* ${stat.new}
‚è≥ *”®“£–¥–µ–ª—É–¥–µ / –í —Ä–∞–±–æ—Ç–µ:* ${stat.in_progress}
‚úÖ *–®–µ—à—ñ–ª–≥–µ–Ω / –†–µ—à–µ–Ω–æ:* ${stat.resolved}
üîí *–ñ–∞–±—ã–ª“ì–∞–Ω / –ó–∞–∫—Ä—ã—Ç–æ:* ${stat.closed}
üî¥ *–®“±“ì—ã–ª / –°—Ä–æ—á–Ω—ã—Ö:* ${stat.urgent}

_–ñ–∞“£–∞—Ä—Ç—ã–ª–¥—ã / –û–±–Ω–æ–≤–ª–µ–Ω–æ:_ ${new Date().toLocaleString('kk-KZ')}`;

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  async handleCancel(msg) {
    const chatId = msg.chat.id;
    this.userStates.delete(chatId);
    await this.bot.sendMessage(chatId, '‚ùå ”ò—Ä–µ–∫–µ—Ç —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã / –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    await this.handleStart(msg);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  async handlePhoto(msg) {
    const chatId = msg.chat.id;
    const userState = this.userStates.get(chatId);

    if (!userState || !userState.ticketData) {
      await this.bot.sendMessage(chatId, 
        '–ê–ª–¥—ã–º–µ–Ω ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞“£—ã–∑ / –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É\n/start'
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –¥–ª—è –±—É–¥—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (!userState.ticketData.attachments) {
      userState.ticketData.attachments = [];
    }
    
    userState.ticketData.attachments.push({
      type: 'photo',
      fileId: msg.photo[msg.photo.length - 1].file_id
    });

    await this.bot.sendMessage(chatId, 
      'üì∏ –§–æ—Ç–æ “õ–æ—Å—ã–ª–¥—ã / –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n' +
      '–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  async handleDocument(msg) {
    const chatId = msg.chat.id;
    const userState = this.userStates.get(chatId);

    if (!userState || !userState.ticketData) {
      await this.bot.sendMessage(chatId, 
        '–ê–ª–¥—ã–º–µ–Ω ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞“£—ã–∑ / –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É\n/start'
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    if (!userState.ticketData.attachments) {
      userState.ticketData.attachments = [];
    }
    
    userState.ticketData.attachments.push({
      type: 'document',
      fileId: msg.document.file_id,
      fileName: msg.document.file_name
    });

    await this.bot.sendMessage(chatId, 
      'üìé –§–∞–π–ª “õ–æ—Å—ã–ª–¥—ã / –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω\n' +
      '–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'
    );
  }

  // –£—Ç–∏–ª–∏—Ç—ã
  validateEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }


  getPriorityName(priorityId) {
    const priorities = {
      'low': '–¢”©–º–µ–Ω / –ù–∏–∑–∫–∏–π',
      'medium': '–û—Ä—Ç–∞—à–∞ / –°—Ä–µ–¥–Ω–∏–π',
      'high': '–ñ–æ“ì–∞—Ä—ã / –í—ã—Å–æ–∫–∏–π',
      'urgent': '–®“±“ì—ã–ª / –°—Ä–æ—á–Ω—ã–π'
    };
    return priorities[priorityId] || priorityId;
  }

  getStatusName(statusId) {
    const statuses = {
      'new': '–ñ–∞“£–∞ / –ù–æ–≤–∞—è',
      'in_progress': '”®“£–¥–µ–ª—É–¥–µ / –í —Ä–∞–±–æ—Ç–µ',
      'pending': '–ö“Ø—Ç—É–¥–µ / –í –æ–∂–∏–¥–∞–Ω–∏–∏',
      'resolved': '–®–µ—à—ñ–ª–¥—ñ / –†–µ—à–µ–Ω–∞',
      'closed': '–ñ–∞–±—ã–ª–¥—ã / –ó–∞–∫—Ä—ã—Ç–∞',
      'telegram_pending': 'Telegram –∞—Ä“õ—ã–ª—ã –∫“Ø—Ç—É–¥–µ / –û–∂–∏–¥–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram',
      'whatsapp_pending': 'WhatsApp –∞—Ä“õ—ã–ª—ã –∫“Ø—Ç—É–¥–µ / –û–∂–∏–¥–∞–µ—Ç —á–µ—Ä–µ–∑ WhatsApp'
    };
    return statuses[statusId] || statusId;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
  isAdmin(chatId) {
    return this.adminChatIds.includes(chatId.toString()) || 
           this.moderatorChatIds.includes(chatId.toString());
  }
}

module.exports = HelpdeskTelegramBot;