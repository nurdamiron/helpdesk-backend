const TelegramBot = require('node-telegram-bot-api');
const pool = require('../../config/database');
const { sendTicketCreationNotification } = require('../../utils/emailService');

class HelpdeskTelegramBot {
  constructor() {
    this.token = process.env.TELEGRAM_BOT_TOKEN;
    if (!this.token) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      throw new Error('TELEGRAM_BOT_TOKEN is not set');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤
    this.bot = null;
    this.isInitializing = true;
    this.isRunning = false;
    this.userStates = new Map();
    this.adminChatIds = [];
    this.moderatorChatIds = [];
    this.instanceId = `bot-${process.pid}-${Date.now()}`;
    this.retryCount = 0;
    this.maxRetries = 3;
    
    console.log(`ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Telegram –±–æ—Ç–∞ (ID: ${this.instanceId})`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    this.init().catch(error => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      this.isInitializing = false;
      this.isRunning = false;
    });
  }

  async init() {
    try {
      console.log(`üìç –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ (ID: ${this.instanceId})`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ, polling –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
      const useWebhook = process.env.NODE_ENV === 'production' || process.env.USE_WEBHOOK === 'true';
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
      if (useWebhook) {
        this.bot = new TelegramBot(this.token, { webHook: false });
      } else {
        this.bot = new TelegramBot(this.token, { 
          polling: false // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
      global.telegramBot = this;
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupHandlers();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.loadAdminList();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
      if (useWebhook) {
        await this.setupWebhook();
      } else {
        await this.startPollingWithRetry();
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      this.isInitializing = false;
      this.isRunning = true;
      
      console.log(`‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (ID: ${this.instanceId})`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ (ID: ${this.instanceId}):`, error);
      this.isInitializing = false;
      this.isRunning = false;
      throw error;
    }
  }

  async startPollingWithRetry() {
    let retryCount = 0;
    const maxRetries = 3;
    const baseDelay = 20000; // 20 —Å–µ–∫—É–Ω–¥ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    while (retryCount < maxRetries) {
      try {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries} –∑–∞–ø—É—Å–∫–∞ polling...`);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await this.clearPreviousConnections();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        if (retryCount > 0) {
          const delay = baseDelay + (retryCount * 10000);
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await this.bot.startPolling({
          restart: true,
          polling: {
            interval: 2000,
            params: {
              timeout: 30,
              allowed_updates: ["message", "callback_query", "inline_query"]
            }
          }
        });
        
        console.log(`‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ —Ä–µ–∂–∏–º–µ polling (ID: ${this.instanceId})`);
        return; // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
        
      } catch (error) {
        retryCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries}):`, error.message);
        
        if (error.message.includes('409') || error.message.includes('Conflict')) {
          console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞');
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
          await this.forceClearTelegramApi();
          
          if (retryCount >= maxRetries) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞`);
          }
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –º–µ–Ω—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          await new Promise(resolve => setTimeout(resolve, 5000));
          
          if (retryCount >= maxRetries) {
            throw error;
          }
        }
      }
    }
  }

  async setupWebhook() {
    try {
      const webhookUrl = `${process.env.WEBHOOK_URL || 'https://your-domain.com'}/api/telegram/webhook`;
      await this.bot.setWebHook(webhookUrl);
      console.log('‚úÖ Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ:', webhookUrl);
      this.isInitializing = false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.message);
      this.isInitializing = false;
      throw error;
    }
  }

  async clearPreviousConnections() {
    try {
      // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      await this.bot.deleteWebHook();
      console.log('üßπ Webhook —É–¥–∞–ª–µ–Ω');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ):', error.message);
    }
  }

  async forceClearTelegramApi() {
    try {
      console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Telegram API...');
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
      const tempBot = new TelegramBot(this.token, { polling: false, webHook: false });
      
      // –£–¥–∞–ª—è–µ–º webhook
      try {
        await tempBot.deleteWebHook();
        console.log('üßπ Webhook —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç');
      } catch (e) {
        console.log('‚ö†Ô∏è Webhook —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
      try {
        await tempBot.getUpdates({ offset: -1 });
        console.log('üßπ –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞');
      } catch (e) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', e.message);
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 2000));
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/start(.*)/, (msg, match) => this.handleStart(msg, match));
    this.bot.onText(/\/help/, (msg) => this.handleHelp(msg));
    this.bot.onText(/\/status (.+)/, (msg, match) => this.handleStatus(msg, match));
    this.bot.onText(/\/mytickets/, (msg) => this.handleMyTickets(msg));
    this.bot.onText(/\/cancel/, (msg) => this.handleCancel(msg));
    
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    this.bot.onText(/\/register (.+)/, (msg, match) => this.handleAdminRegister(msg, match));
    this.bot.onText(/\/stats/, (msg) => this.handleAdminStats(msg));
    this.bot.onText(/\/active/, (msg) => this.handleShowActiveTickets(msg));
    
    // Callback queries (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)
    this.bot.on('callback_query', (query) => this.handleCallbackQuery(query));
    
    // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', (msg) => {
      if (!msg.text || msg.text.startsWith('/')) return;
      this.handleMessage(msg);
    });
    
    // –§–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    this.bot.on('photo', (msg) => this.handlePhoto(msg));
    this.bot.on('document', (msg) => this.handleDocument(msg));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      console.error('Telegram polling error:', error);
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  async loadAdminList() {
    try {
      const [admins] = await pool.query(
        `SELECT telegram_chat_id, role, first_name, last_name 
         FROM users 
         WHERE role IN ('admin', 'moderator') 
         AND telegram_chat_id IS NOT NULL 
         AND is_active = 1`
      );

      this.adminChatIds = admins
        .filter(u => u.role === 'admin')
        .map(u => u.telegram_chat_id);
        
      this.moderatorChatIds = admins
        .filter(u => u.role === 'moderator')
        .map(u => u.telegram_chat_id);

      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.adminChatIds.length} –∞–¥–º–∏–Ω–æ–≤ –∏ ${this.moderatorChatIds.length} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
    }
  }

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
  async handleStart(msg, match) {
    const chatId = msg.chat.id;
    const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start
    if (match && match[1] && match[1].trim()) {
      // –≠—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ URL
      const encodedData = match[1].trim();
      try {
        const decodedMessage = decodeURIComponent(encodedData);
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
        await this.handleQuickTicket({ ...msg, text: decodedMessage });
        return;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏:', error);
      }
    }
    
    const welcomeText = `
üèóÔ∏è *“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑, ${userName}!*
_–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ê–ª–∞—Ç–∞—É –°—Ç—Ä–æ–π –ò–Ω–≤–µ—Å—Ç_

–ú–µ–Ω —Å—ñ–∑–≥–µ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω.
_–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏._

üìã *–ù–µ —ñ—Å—Ç–µ–π –∞–ª–∞—Å—ã–∑ / –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É / –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
‚Ä¢ ”®—Ç—ñ–Ω—ñ—à –∫“Ø–π—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
‚Ä¢ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä / –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—É / –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

–¢”©–º–µ–Ω–¥–µ –ø”ô—Ä–º–µ–Ω–¥–µ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:
_–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:_`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à / –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', callback_data: 'new_ticket' }
        ],
        [
          { text: 'üìä –ú–µ–Ω—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ–º / –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'my_tickets' },
          { text: 'üîç –ö“Ø–π–¥—ñ —Ç–µ–∫—Å–µ—Ä—É / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'check_status' }
        ],
        [
          { text: 'üö® –®“±“ì—ã–ª / –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å', callback_data: 'urgent_help' },
          { text: 'üìã –ñ–∏—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä / FAQ', callback_data: 'faq' }
        ],
        [
          { text: '‚ùì –ö”©–º–µ–∫ / –ü–æ–º–æ—â—å', callback_data: 'help' },
          { text: '‚òéÔ∏è –ë–∞–π–ª–∞–Ω—ã—Å / –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' }
        ],
        [
          { text: 'üåê –í–µ–±-—Å–∞–π—Ç / –í–µ–±-—Å–∞–π—Ç', url: process.env.FRONTEND_URL || 'http://localhost:5173' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, welcomeText, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
  async handleCallbackQuery(query) {
    const chatId = query.message.chat.id;
    const data = query.data;

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await this.bot.answerCallbackQuery(query.id);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (data.startsWith('admin_')) {
      await this.handleAdminCallback(query);
      return;
    }

    switch (data) {
      case 'new_ticket':
        await this.startTicketCreation(chatId);
        break;
      case 'my_tickets':
        await this.showMyTickets(chatId, query.from.id);
        break;
      case 'check_status':
        await this.askForTicketId(chatId);
        break;
      case 'urgent_help':
        await this.showUrgentHelp(chatId);
        break;
      case 'faq':
        await this.showFAQ(chatId);
        break;
      case 'help':
        await this.showHelp(chatId);
        break;
      case 'contacts':
        await this.showContacts(chatId);
        break;
      case 'main_menu':
        await this.handleStart(query.message, []);
        break;
      case 'urgent_ticket':
        await this.startUrgentTicketCreation(chatId);
        break;
      case 'ask_question':
        await this.startQuestionMode(chatId);
        break;
      default:
        if (data.startsWith('priority_')) {
          await this.selectPriority(chatId, data.replace('priority_', ''));
        } else if (data.startsWith('type_')) {
          await this.selectType(chatId, data.replace('type_', ''));
        } else if (data.startsWith('reply_')) {
          await this.handleReplyCallback(query);
        } else if (data.startsWith('status_')) {
          await this.handleStatusCallback(query);
        }
    }
  }

  // –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
  async startTicketCreation(chatId) {
    this.userStates.set(chatId, {
      step: 'awaiting_subject',
      ticketData: {}
    });

    const text = `
üìù *–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É / –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*

–°“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑:
_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:_

1Ô∏è‚É£ *”®—Ç—ñ–Ω—ñ—à —Ç–∞“õ—ã—Ä—ã–±—ã–Ω –∂–∞–∑—ã“£—ã–∑ / –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∑–∞—è–≤–∫–∏:*
_–ú—ã—Å–∞–ª—ã / –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∏–Ω—Ç–µ—Ä –∂“±–º—ã—Å —ñ—Å—Ç–µ–º–µ–π–¥—ñ" / "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä"_`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ùå –ñ–∞–±—É / –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'main_menu' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, text, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏
  async startUrgentTicketCreation(chatId) {
    this.userStates.set(chatId, {
      step: 'awaiting_subject',
      ticketData: { priority: 'urgent' }
    });

    const text = `
üö® *–®“∞“í–´–õ ”®–¢–Ü–ù–Ü–® / –°–†–û–ß–ù–ê–Ø –ó–ê–Ø–í–ö–ê*

‚ö†Ô∏è *–ù–∞–∑–∞—Ä–∞“ì–∞—Ä / –í–Ω–∏–º–∞–Ω–∏–µ:* –ë“±–ª —à“±“ì—ã–ª –∫”©–º–µ–∫ “Ø—à—ñ–Ω / –≠—Ç–æ –¥–ª—è —Å—Ä–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏

–°“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑:
_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:_

1Ô∏è‚É£ *–ù–µ –±–æ–ª–¥—ã? –ú”ô—Å–µ–ª–µ–Ω—ñ “õ—ã—Å“õ–∞—à–∞ –∂–∞–∑—ã“£—ã–∑ / –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å? –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:*`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìû “ö–æ“£—ã—Ä–∞—É —à–∞–ª—É / –ü–æ–∑–≤–æ–Ω–∏—Ç—å', url: 'tel:+77770131838' }
        ],
        [
          { text: '‚ùå –ñ–∞–±—É / –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'main_menu' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, text, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –†–µ–∂–∏–º –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  async startQuestionMode(chatId) {
    this.userStates.set(chatId, {
      step: 'awaiting_question',
      mode: 'question'
    });

    const text = `
üí¨ *–°“∞–†–ê“ö “ö–û–Æ / –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°*

–°—ñ–∑–¥—ñ“£ —Å“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑, –±—ñ–∑ —Ç–µ–∑ –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–∑:
_–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –º—ã –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏–º:_

üìù *–ú—ã—Å–∞–ª–¥–∞—Ä / –ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ "–ü—Ä–∏–Ω—Ç–µ—Ä –∂“±–º—ã—Å —ñ—Å—Ç–µ–º–µ–π–¥—ñ" / "–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
‚Ä¢ "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞—è—É" / "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–π"  
‚Ä¢ "–ö–æ–º–ø—å—é—Ç–µ—Ä “õ–æ—Å—ã–ª–º–∞–π–¥—ã" / "–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è"
‚Ä¢ "“ö“±–ø–∏—è —Å”©–∑–¥—ñ “±–º—ã—Ç—Ç—ã–º" / "–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å"

_–ù–µ–º–µ—Å–µ –¥–µ—Ä–µ—É “õ–æ“£—ã—Ä–∞—É —à–∞–ª—ã“£—ã–∑:_
_–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:_`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìû –î–µ—Ä–µ—É “õ–æ“£—ã—Ä–∞—É / –ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–π—á–∞—Å', url: 'tel:+77770131838' }
        ],
        [
          { text: '‚ùå –ñ–∞–±—É / –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'main_menu' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, text, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  async handleMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userState = this.userStates.get(chatId);

    if (!userState) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞
      await this.handleQuickTicket(msg);
      return;
    }

    switch (userState.step) {
      case 'awaiting_question':
        if (userState.mode === 'question') {
          await this.handleQuickQuestion(chatId, text, msg.from.id);
          return;
        }
        break;

      case 'awaiting_subject':
        userState.ticketData.subject = text;
        userState.step = 'awaiting_description';
        await this.bot.sendMessage(chatId, '2Ô∏è‚É£ *–ú”ô—Å–µ–ª–µ–Ω—ñ —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑ / –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:*', { parse_mode: 'Markdown' });
        break;

      case 'awaiting_description':
        userState.ticketData.description = text;
        userState.step = 'awaiting_name';
        
        const keyboard = {
          inline_keyboard: [
            [
              { text: '‚ùå –ñ–∞–±—É / –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'main_menu' }
            ]
          ]
        };
        
        await this.bot.sendMessage(chatId, '3Ô∏è‚É£ *–ê—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑ / –í–∞—à–µ –§–ò–û:*', { 
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
        break;

      case 'awaiting_name':
        userState.ticketData.name = text;
        userState.step = 'awaiting_email';
        await this.bot.sendMessage(chatId, '4Ô∏è‚É£ *Email –º–µ–∫–µ–Ω–∂–∞–π—ã“£—ã–∑ / –í–∞—à email:*', { parse_mode: 'Markdown' });
        break;

      case 'awaiting_email':
        if (!this.validateEmail(text)) {
          await this.bot.sendMessage(chatId, '‚ùå –î“±—Ä—ã—Å email –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ / –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
          return;
        }
        userState.ticketData.email = text;
        userState.step = 'awaiting_phone';
        await this.bot.sendMessage(chatId, '5Ô∏è‚É£ *–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑ / –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:*\n_(–º—ñ–Ω–¥–µ—Ç—Ç—ñ –µ–º–µ—Å / –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω "-" –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ / –≤–≤–µ–¥–∏—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)_', { parse_mode: 'Markdown' });
        break;

      case 'awaiting_phone':
        if (text !== '-' && text !== '–∂–æ“õ' && text !== '–Ω–µ—Ç') {
          userState.ticketData.phone = text;
        }
        userState.step = 'awaiting_type';
        await this.showTypeSelection(chatId);
        break;


      case 'replying':
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await this.processUserReply(chatId, text, userState.ticketId);
        break;

      case 'admin_replying':
        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await this.processAdminReply(chatId, text, userState.ticketId, userState.adminId, userState.adminName);
        break;

      case 'awaiting_confirmation':
        if (text.toLowerCase() === '–∏”ô' || text.toLowerCase() === '–¥–∞') {
          await this.createTicket(chatId, userState.ticketData, msg.from.id);
        } else {
          await this.bot.sendMessage(chatId, '‚ùå ”®—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É–¥–∞–Ω –±–∞—Å —Ç–∞—Ä—Ç—ã–ª–¥—ã / –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
          this.userStates.delete(chatId);
        }
        break;

      case 'awaiting_ticket_id':
        await this.checkTicketStatus(chatId, text);
        this.userStates.delete(chatId);
        break;
    }

    this.userStates.set(chatId, userState);
  }

  // –ü–æ–∫–∞–∑ —Ç–∏–ø–æ–≤ –∑–∞—è–≤–æ–∫
  async showTypeSelection(chatId) {
    const types = [
      { id: 'support_request', name: 'üîß –°“±—Ä–∞—É / –ó–∞–ø—Ä–æ—Å' },
      { id: 'complaint', name: 'üìã –®–∞“ì—ã–º / –ñ–∞–ª–æ–±–∞' },
      { id: 'incident', name: 'üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç / –ò–Ω—Ü–∏–¥–µ–Ω—Ç' }
    ];

    const keyboard = {
      inline_keyboard: types.map(type => [{
        text: type.name,
        callback_data: `type_${type.id}`
      }])
    };

    await this.bot.sendMessage(chatId, '6Ô∏è‚É£ *”®—Ç—ñ–Ω—ñ—à —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:*', {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
  async selectType(chatId, typeId) {
    const userState = this.userStates.get(chatId);
    if (!userState) return;

    userState.ticketData.type = typeId;
    userState.step = 'awaiting_priority';
    
    await this.showPrioritySelection(chatId);
  }

  // –ü–æ–∫–∞–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
  async showPrioritySelection(chatId) {
    const priorities = [
      { id: 'low', name: 'üü¢ –¢”©–º–µ–Ω / –ù–∏–∑–∫–∏–π' },
      { id: 'medium', name: 'üü° –û—Ä—Ç–∞—à–∞ / –°—Ä–µ–¥–Ω–∏–π' },
      { id: 'high', name: 'üü† –ñ–æ“ì–∞—Ä—ã / –í—ã—Å–æ–∫–∏–π' },
      { id: 'urgent', name: 'üî¥ –®“±“ì—ã–ª / –°—Ä–æ—á–Ω—ã–π' }
    ];

    const keyboard = {
      inline_keyboard: priorities.map(priority => [{
        text: priority.name,
        callback_data: `priority_${priority.id}`
      }])
    };

    await this.bot.sendMessage(chatId, '7Ô∏è‚É£ *–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:*', {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  async selectPriority(chatId, priorityId) {
    const userState = this.userStates.get(chatId);
    if (!userState) return;

    userState.ticketData.priority = priorityId;
    userState.step = 'awaiting_confirmation';
    
    await this.showTicketSummary(chatId, userState.ticketData);
  }

  // –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  async showTicketSummary(chatId, ticketData) {
    const summary = `
‚úÖ *”®—Ç—ñ–Ω—ñ—à –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ / –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*

üë§ *–ê—Ç—ã-–∂”©–Ω—ñ / –§–ò–û:* ${ticketData.name}
üìß *Email:* ${ticketData.email}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${ticketData.phone || '–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω / –ù–µ —É–∫–∞–∑–∞–Ω'}
üìã *–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:* ${ticketData.subject}
üè∑Ô∏è *–¢“Ø—Ä—ñ / –¢–∏–ø:* ${this.getTypeName(ticketData.type)}
üìù *–°–∏–ø–∞—Ç—Ç–∞–º–∞ / –û–ø–∏—Å–∞–Ω–∏–µ:* 
${ticketData.description}
‚ö° *–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityName(ticketData.priority)}

*–†–∞—Å—Ç–∞–π—Å—ã–∑ –±–∞? / –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?*
–ñ–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑: *–ò”ô/–î–∞* –Ω–µ–º–µ—Å–µ *–ñ–æ“õ/–ù–µ—Ç*`;

    await this.bot.sendMessage(chatId, summary, { parse_mode: 'Markdown' });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
  async createTicket(chatId, ticketData, telegramUserId) {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
      const [result] = await pool.query(
        `INSERT INTO tickets (subject, description, type, priority, status, metadata, requester_metadata, user_id) 
         VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          ticketData.subject,
          ticketData.description,
          ticketData.type || 'support_request',
          ticketData.priority,
          'new',
          JSON.stringify({
            source: 'telegram',
            telegram_chat_id: chatId,
            telegram_user_id: telegramUserId
          }),
          JSON.stringify({
            name: ticketData.name,
            email: ticketData.email,
            phone: ticketData.phone
          }),
          null
        ]
      );

      const ticketId = result.insertId;

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
      const [ticketRows] = await pool.query('SELECT * FROM tickets WHERE id = ?', [ticketId]);
      const ticket = ticketRows[0];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (ticketData.email) {
        await sendTicketCreationNotification(ticketData.email, ticket);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram
      const successMessage = `
‚úÖ *”®—Ç—ñ–Ω—ñ—à —Å”ô—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª–¥—ñ! / –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*

üé´ *”®—Ç—ñ–Ω—ñ—à –Ω”©–º—ñ—Ä—ñ / –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #${ticketId}
üìß *Email-–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ / –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email*

”®—Ç—ñ–Ω—ñ—à –∫“Ø–π—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω:
_–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:_
/status ${ticketId}

üí¨ *“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞, –±—ñ–∑ —Å—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞–º—ã–∑*
_–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏_`;

      await this.bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.notifyAdminsNewTicket(ticket, ticketData);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.userStates.delete(chatId);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    }
  }

  // –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å frontend)
  async handleQuickTicket(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (text.includes('–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í –°–õ–£–ñ–ë–£ –ü–û–î–î–ï–†–ñ–ö–ò') || text.includes('–ñ–ê“¢–ê ”®–¢–Ü–ù–Ü–®')) {
      try {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        const ticketData = this.parseTicketMessage(text);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        await this.createTicketFromParsedData(chatId, ticketData, msg.from.id);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏:', error);
        await this.startTicketCreation(chatId);
      }
    } else {
      // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
      await this.bot.sendMessage(chatId, 
        '–°—ñ–∑ –∂–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ –º–µ? / –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?\n\n' +
        '“Æ—à—ñ–Ω /start –±–∞—Å—ã“£—ã–∑ / –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞'
      );
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  parseTicketMessage(text) {
    const data = {};
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    const patterns = {
      name: /(?:–°–æ—Ç—Ä—É–¥–Ω–∏–∫|“ö—ã–∑–º–µ—Ç–∫–µ—Ä):\s*(.+?)(?:\n|$)/,
      email: /Email:\s*(.+?)(?:\n|$)/,
      phone: /(?:–¢–µ–ª–µ—Ñ–æ–Ω|–¢–µ–ª–µ—Ñ–æ–Ω):\s*(.+?)(?:\n|$)/,
      subject: /(?:–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è|”®—Ç—ñ–Ω—ñ—à —Ç–∞“õ—ã—Ä—ã–±—ã):\s*(.+?)(?:\n|$)/,
      type: /(?:–¢–∏–ø –∑–∞—è–≤–∫–∏|”®—Ç—ñ–Ω—ñ—à —Ç“Ø—Ä—ñ):\s*(.+?)(?:\n|$)/,
      priority: /(?:–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç|–ë–∞—Å—ã–º–¥—ã–ª—ã“õ):\s*(.+?)(?:\n|$)/,
      description: /(?:–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã|–ú”ô—Å–µ–ª–µ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã):\s*([\s\S]+?)(?:\n\n|$)/
    };

    for (const [key, pattern] of Object.entries(patterns)) {
      const match = text.match(pattern);
      if (match) {
        data[key] = match[1].trim();
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (data.priority) {
      const priorityMap = {
        '–ù–∏–∑–∫–∏–π': 'low',
        '–¢”©–º–µ–Ω': 'low',
        '–°—Ä–µ–¥–Ω–∏–π': 'medium',
        '–û—Ä—Ç–∞—à–∞': 'medium',
        '–í—ã—Å–æ–∫–∏–π': 'high',
        '–ñ–æ“ì–∞—Ä—ã': 'high',
        '–°—Ä–æ—á–Ω—ã–π': 'urgent',
        '–®“±“ì—ã–ª': 'urgent'
      };
      data.priority = priorityMap[data.priority] || 'medium';
    }

    return data;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  async handleQuickQuestion(chatId, questionText, telegramUserId) {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å —Ç–∏–ø–æ–º "–≤–æ–ø—Ä–æ—Å"
      const [result] = await pool.query(
        `INSERT INTO tickets (subject, description, type, priority, status, metadata, requester_metadata) 
         VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [
          `–°“±—Ä–∞“õ / –í–æ–ø—Ä–æ—Å: ${questionText.substring(0, 50)}...`,
          questionText,
          'support_request',
          'medium',
          'new',
          JSON.stringify({
            source: 'telegram_question',
            telegram_chat_id: chatId,
            telegram_user_id: telegramUserId,
            quick_question: true
          }),
          JSON.stringify({
            name: `Telegram User ${telegramUserId}`,
            telegram_username: `@telegram_user_${telegramUserId}`
          })
        ]
      );

      const ticketId = result.insertId;

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const confirmMessage = `
üí¨ *–°“±—Ä–∞“ì—ã“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã / –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!*

üé´ *”®—Ç—ñ–Ω—ñ—à –Ω”©–º—ñ—Ä—ñ / –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #${ticketId}

üìù *–°“±—Ä–∞“ì—ã“£—ã–∑ / –í–∞—à –≤–æ–ø—Ä–æ—Å:*
${questionText}

‚è±Ô∏è *–û—Ä—Ç–∞—à–∞ –∂–∞—É–∞–ø —É–∞“õ—ã—Ç—ã / –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* 30 –º–∏–Ω—É—Ç - 2 —Å–∞“ì–∞—Ç / —á–∞—Å–∞

_–ë—ñ–∑ —Å—ñ–∑–±–µ–Ω —Ç–µ–∑ –∞—Ä–∞–¥–∞ –±–∞–π–ª–∞–Ω—ã—Å–∞–º—ã–∑_
_–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è_`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –ö“Ø–π–¥—ñ –∫”©—Ä—É / –°—Ç–∞—Ç—É—Å', callback_data: `status_${ticketId}` }
          ],
          [
            { text: 'üí¨ –ë–∞—Å“õ–∞ —Å“±—Ä–∞“õ / –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' },
            { text: 'üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      };

      await this.bot.sendMessage(chatId, confirmMessage, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.notifyAdminsQuickQuestion(ticketId, questionText, telegramUserId);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.userStates.delete(chatId);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –±—ã—Å—Ç—Ä–æ–º –≤–æ–ø—Ä–æ—Å–µ
  async notifyAdminsQuickQuestion(ticketId, questionText, telegramUserId) {
    try {
      const message = `
üí¨ *–ñ–´–õ–î–ê–ú –°“∞–†–ê“ö / –ë–´–°–¢–†–´–ô –í–û–ü–†–û–° #${ticketId}*

üë§ *–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã / –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* Telegram User ${telegramUserId}
üì± *–ö”©–∑—ñ / –ò—Å—Ç–æ—á–Ω–∏–∫:* Telegram (–ë—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å)

‚ùì *–°“±—Ä–∞“õ / –í–æ–ø—Ä–æ—Å:*
${questionText}

‚ö° *–ë“±–ª –∂—ã–ª–¥–∞–º —Å“±—Ä–∞“õ - —Ç–µ–∑ –∂–∞—É–∞–ø –∫“Ø—Ç–µ–¥—ñ*
*–≠—Ç–æ –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å - –æ–∂–∏–¥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞*`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üí¨ –ñ–∞—É–∞–ø –±–µ—Ä—É / –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `admin_reply_${ticketId}` },
            { text: 'üëÅ “ö–∞—Ä–∞—É / –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', callback_data: `admin_view_${ticketId}` }
          ],
          [
            { text: '‚úã “ö–∞–±—ã–ª–¥–∞—É / –ü—Ä–∏–Ω—è—Ç—å', callback_data: `admin_take_${ticketId}` }
          ]
        ]
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      const allAdmins = [...this.adminChatIds, ...this.moderatorChatIds];
      
      for (const chatId of allAdmins) {
        try {
          await this.bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
        } catch (error) {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${chatId}:`, error.message);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –±—ã—Å—Ç—Ä–æ–º –≤–æ–ø—Ä–æ—Å–µ:', error);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async createTicketFromParsedData(chatId, ticketData, telegramUserId) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É
      const [pendingTickets] = await pool.query(
        `SELECT id FROM tickets 
         WHERE status = 'telegram_pending' 
         AND JSON_EXTRACT(metadata, '$.communicationChannel') = 'telegram'
         AND created_at >= DATE_SUB(NOW(), INTERVAL 5 MINUTE)
         ORDER BY created_at DESC LIMIT 1`
      );

      let ticketId;
      
      if (pendingTickets.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
        ticketId = pendingTickets[0].id;
        await pool.query(
          `UPDATE tickets 
           SET status = 'new',
               metadata = JSON_SET(metadata, 
                 '$.telegram_chat_id', ?,
                 '$.telegram_user_id', ?,
                 '$.telegram_confirmed', true
               )
           WHERE id = ?`,
          [chatId, telegramUserId, ticketId]
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        const [result] = await pool.query(
          `INSERT INTO tickets (subject, description, type, priority, status, metadata, requester_metadata) 
           VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            ticketData.subject || '–ó–∞—è–≤–∫–∞ –∏–∑ Telegram',
            ticketData.description || ticketData.subject,
            ticketData.type || 'support_request',
            ticketData.priority || 'medium',
            'new',
            JSON.stringify({
              source: 'telegram',
              telegram_chat_id: chatId,
              telegram_user_id: telegramUserId
            }),
            JSON.stringify({
              name: ticketData.name,
              email: ticketData.email,
              phone: ticketData.phone
            })
          ]
        );
        ticketId = result.insertId;
      }

      const confirmMessage = `
‚úÖ *”®—Ç—ñ–Ω—ñ—à “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! / –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*

üé´ *”®—Ç—ñ–Ω—ñ—à –Ω”©–º—ñ—Ä—ñ / –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #${ticketId}
üìß *Email:* ${ticketData.email}

üìä *–ö“Ø–π / –°—Ç–∞—Ç—É—Å:* –ñ–∞“£–∞ / –ù–æ–≤–∞—è
‚è±Ô∏è *–û—Ä—Ç–∞—à–∞ ”©“£–¥–µ—É —É–∞“õ—ã—Ç—ã / –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:* 2-4 —Å–∞“ì–∞—Ç / —á–∞—Å–∞

_–ë—ñ–∑ —Å—ñ–∑–±–µ–Ω –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ –±–∞–π–ª–∞–Ω—ã—Å–∞–º—ã–∑_
_–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è_

/status ${ticketId} - –∫“Ø–π–¥—ñ —Ç–µ–∫—Å–µ—Ä—É / –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å`;

      await this.bot.sendMessage(chatId, confirmMessage, { parse_mode: 'Markdown' });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      const [tickets] = await pool.query('SELECT * FROM tickets WHERE id = ?', [ticketId]);
      if (tickets.length > 0) {
        await this.notifyAdminsNewTicket(tickets[0], ticketData);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
  async notifyAdminsNewTicket(ticket, ticketData) {
    const priorityEmoji = {
      'low': 'üü¢',
      'medium': 'üü°', 
      'high': 'üü†',
      'urgent': 'üî¥'
    };

    const message = `
${priorityEmoji[ticket.priority]} *–ñ–ê“¢–ê ”®–¢–Ü–ù–Ü–® / –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #${ticket.id}*

üë§ *“ö—ã–∑–º–µ—Ç–∫–µ—Ä / –°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${ticketData.name}
üìß *Email:* ${ticketData.email}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${ticketData.phone || '–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω / –ù–µ —É–∫–∞–∑–∞–Ω'}

üìã *–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:* ${ticket.subject}
‚ö° *–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityName(ticket.priority)}

üìù *–°–∏–ø–∞—Ç—Ç–∞–º–∞ / –û–ø–∏—Å–∞–Ω–∏–µ:*
${ticket.description}

‚è∞ *–£–∞“õ—ã—Ç / –í—Ä–µ–º—è:* ${new Date().toLocaleString('kk-KZ')}
üì± *–ö”©–∑—ñ / –ò—Å—Ç–æ—á–Ω–∏–∫:* Telegram`;

    // Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üëÅ “ö–∞—Ä–∞—É / –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', callback_data: `admin_view_${ticket.id}` },
          { text: '‚úã “ö–∞–±—ã–ª–¥–∞—É / –ü—Ä–∏–Ω—è—Ç—å', callback_data: `admin_take_${ticket.id}` }
        ],
        [
          { text: 'üìä –ë–∞—Ä–ª—ã“õ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä / –í—Å–µ –∑–∞—è–≤–∫–∏', url: `${process.env.FRONTEND_URL || 'http://localhost:5173'}/tickets` }
        ]
      ]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    const allAdmins = [...this.adminChatIds, ...this.moderatorChatIds];
    
    for (const chatId of allAdmins) {
      try {
        await this.bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${chatId}:`, error.message);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async handleAdminCallback(query) {
    const chatId = query.message.chat.id;
    const data = query.data;
    const adminId = query.from.id;

    if (data.startsWith('admin_view_')) {
      const ticketId = data.replace('admin_view_', '');
      await this.showTicketDetailsForAdmin(chatId, ticketId);
      
    } else if (data.startsWith('admin_take_')) {
      const ticketId = data.replace('admin_take_', '');
      await this.assignTicketToAdmin(chatId, ticketId, adminId);
      
    } else if (data.startsWith('admin_reply_')) {
      const ticketId = data.replace('admin_reply_', '');
      await this.startAdminReply(chatId, ticketId, adminId);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
  async showTicketDetailsForAdmin(chatId, ticketId) {
    try {
      const [tickets] = await pool.query(
        `SELECT t.*, u.email as user_email, u.first_name as user_first_name, u.last_name as user_last_name
         FROM tickets t 
         LEFT JOIN users u ON t.user_id = u.id 
         WHERE t.id = ?`,
        [ticketId]
      );

      if (tickets.length === 0) {
        await this.bot.sendMessage(chatId, `‚ùå ”®—Ç—ñ–Ω—ñ—à #${ticketId} —Ç–∞–±—ã–ª–º–∞–¥—ã / –ó–∞—è–≤–∫–∞ #${ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }

      const ticket = tickets[0];
      let requesterInfo = {};
      
      if (ticket.requester_metadata) {
        try {
          requesterInfo = JSON.parse(ticket.requester_metadata);
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ requester_metadata:', e);
        }
      }

      const statusEmoji = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'pending': '‚è∏Ô∏è',
        'resolved': '‚úÖ',
        'closed': 'üîí'
      };

      const message = `
${statusEmoji[ticket.status] || 'üìã'} *”®–¢–Ü–ù–Ü–® / –ó–ê–Ø–í–ö–ê #${ticketId}*

üë§ *”®—Ç—ñ–Ω—ñ—à –±–µ—Ä—É—à—ñ / –ó–∞—è–≤–∏—Ç–µ–ª—å:* ${requesterInfo.name || '–ë–µ–ª–≥—ñ—Å—ñ–∑ / –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìß *Email:* ${requesterInfo.email || ticket.user_email || '–ñ–æ“õ / –ù–µ—Ç'}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${requesterInfo.phone || '–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω / –ù–µ —É–∫–∞–∑–∞–Ω'}

üìã *–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:* ${ticket.subject}
üìù *–°–∏–ø–∞—Ç—Ç–∞–º–∞ / –û–ø–∏—Å–∞–Ω–∏–µ:*
${ticket.description}

‚ö° *–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityName(ticket.priority)}
üìä *–ö“Ø–π / –°—Ç–∞—Ç—É—Å:* ${this.getStatusName(ticket.status)}

üìÖ *“ö“±—Ä—ã–ª“ì–∞–Ω / –°–æ–∑–¥–∞–Ω–∞:* ${new Date(ticket.created_at).toLocaleString('kk-KZ')}
üîÑ *–ñ–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω / –û–±–Ω–æ–≤–ª–µ–Ω–∞:* ${new Date(ticket.updated_at).toLocaleString('kk-KZ')}

${ticket.assigned_to ? `üë§ *–û—Ä—ã–Ω–¥–∞—É—à—ã / –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ID ${ticket.assigned_to}` : '‚ùó *–û—Ä—ã–Ω–¥–∞—É—à—ã —Ç–∞“ì–∞–π—ã–Ω–¥–∞–ª–º–∞“ì–∞–Ω / –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω*'}`;

      const keyboard = {
        inline_keyboard: [
          ticket.assigned_to ? [] : [{ text: '‚úã “ö–∞–±—ã–ª–¥–∞—É / –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data: `admin_take_${ticketId}` }],
          [
            { text: 'üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—Ç–µ –∞—à—É / –û—Ç–∫—Ä—ã—Ç—å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ', url: `${process.env.FRONTEND_URL || 'http://localhost:5173'}/tickets/${ticketId}` }
          ]
        ].filter(row => row.length > 0)
      };

      await this.bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  async assignTicketToAdmin(chatId, ticketId, adminTelegramId) {
    try {
      // –ù–∞–π–¥–µ–º user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ telegram_id
      const [adminUser] = await pool.query(
        'SELECT id, first_name, last_name FROM users WHERE telegram_chat_id = ?',
        [adminTelegramId]
      );

      if (adminUser.length === 0) {
        await this.bot.sendMessage(chatId, '‚ùå –°—ñ–∑–¥—ñ“£ –∞–∫–∫–∞—É–Ω—Ç—ã“£—ã–∑ —Ç–∞–±—ã–ª–º–∞–¥—ã / –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n–¢—ñ—Ä–∫–µ–ª—É “Ø—à—ñ–Ω / –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: /register [token]');
        return;
      }

      const admin = adminUser[0];

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
      await pool.query(
        'UPDATE tickets SET assigned_to = ?, status = ? WHERE id = ?',
        [admin.id, 'in_progress', ticketId]
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.bot.sendMessage(chatId, 
        `‚úÖ ”®—Ç—ñ–Ω—ñ—à #${ticketId} —Å—ñ–∑–≥–µ —Ç–∞“ì–∞–π—ã–Ω–¥–∞–ª–¥—ã / –ó–∞—è–≤–∫–∞ #${ticketId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å\n` +
        `üë§ ${admin.first_name} ${admin.last_name}`
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É
      await this.notifyUserTicketAssigned(ticketId, admin);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  async notifyUserTicketAssigned(ticketId, admin) {
    try {
      const [tickets] = await pool.query(
        'SELECT metadata FROM tickets WHERE id = ?',
        [ticketId]
      );

      if (tickets.length > 0) {
        const metadata = JSON.parse(tickets[0].metadata);
        if (metadata.telegram_chat_id) {
          const message = `
üì¨ *”®—Ç—ñ–Ω—ñ—à –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã / –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ #${ticketId}*

üë§ *–û—Ä—ã–Ω–¥–∞—É—à—ã —Ç–∞“ì–∞–π—ã–Ω–¥–∞–ª–¥—ã / –ù–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:*
${admin.first_name} ${admin.last_name}

üìä *–ö“Ø–π / –°—Ç–∞—Ç—É—Å:* ”®“£–¥–µ–ª—É–¥–µ / –í —Ä–∞–±–æ—Ç–µ

_–ë—ñ–∑ —Å—ñ–∑–±–µ–Ω –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ –±–∞–π–ª–∞–Ω—ã—Å–∞–º—ã–∑_
_–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è_`;

          await this.bot.sendMessage(metadata.telegram_chat_id, message, {
            parse_mode: 'Markdown'
          });
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  // –ù–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É
  async startAdminReply(chatId, ticketId, adminTelegramId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      const [adminUser] = await pool.query(
        'SELECT id, first_name, last_name, role FROM users WHERE telegram_chat_id = ?',
        [adminTelegramId]
      );

      if (adminUser.length === 0 || !['admin', 'moderator', 'staff'].includes(adminUser[0].role)) {
        await this.bot.sendMessage(chatId, '‚ùå –°—ñ–∑–¥–µ –±“±–ª ”ô—Ä–µ–∫–µ—Ç—Ç—ñ –æ—Ä—ã–Ω–¥–∞—É“ì–∞ —Ä“±“õ—Å–∞—Ç –∂–æ“õ / –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      this.userStates.set(chatId, {
        step: 'admin_replying',
        ticketId: ticketId,
        adminId: adminUser[0].id,
        adminName: `${adminUser[0].first_name} ${adminUser[0].last_name}`
      });

      const replyMessage = `
üí¨ *”®—Ç—ñ–Ω—ñ—à #${ticketId} “Ø—à—ñ–Ω –∂–∞—É–∞–ø / –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #${ticketId}*

–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –∂—ñ–±–µ—Ä–µ—Ç—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:
_–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:_

üìù *–ö–µ“£–µ—Å—Ç–µ—Ä / –°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ê–Ω—ã“õ –∂”ô–Ω–µ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –±–æ–ª—ã“£—ã–∑ / –ë—É–¥—å—Ç–µ —á–µ—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏
‚Ä¢ “ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç —Å“±—Ä–∞“£—ã–∑ / –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –®–µ—à—ñ–º–¥—ñ “±—Å—ã–Ω—ã“£—ã–∑ / –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ

–ë–æ–ª–¥—ã—Ä–º–∞—É “Ø—à—ñ–Ω /cancel –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑
_–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel_`;

      await this.bot.sendMessage(chatId, replyMessage, { 
        parse_mode: 'Markdown' 
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async handleAdminRegister(msg, match) {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    const username = msg.from.username;

    if (!match || !match[1]) {
      await this.bot.sendMessage(chatId, 
        '–ü–∞–π–¥–∞–ª–∞–Ω—É / –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register [—Ç–æ–∫–µ–Ω]\n' +
        '–¢–æ–∫–µ–Ω–¥—ñ –∂“Ø–π–µ ”ô–∫—ñ–º—à—ñ—Å—ñ–Ω–µ–Ω –∞–ª—ã“£—ã–∑ / –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      );
      return;
    }

    const token = match[1];

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ë–î
      const [users] = await pool.query(
        'SELECT id, role, first_name, last_name FROM users WHERE registration_token = ? AND is_active = 1',
        [token]
      );

      if (users.length === 0) {
        await this.bot.sendMessage(chatId, '‚ùå –ñ–∞—Ä–∞–º—Å—ã–∑ —Ç–æ–∫–µ–Ω / –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
        return;
      }

      const user = users[0];

      // –û–±–Ω–æ–≤–ª—è–µ–º telegram_chat_id
      await pool.query(
        'UPDATE users SET telegram_chat_id = ?, telegram_username = ?, registration_token = NULL WHERE id = ?',
        [telegramId, username, user.id]
      );

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.loadAdminList();

      await this.bot.sendMessage(chatId, 
        `‚úÖ *–¢—ñ—Ä–∫–µ–ª—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n` +
        `üë§ *–ê—Ç—ã-–∂”©–Ω—ñ / –§–ò–û:* ${user.first_name} ${user.last_name}\n` +
        `üîë *–†”©–ª / –†–æ–ª—å:* ${user.role}\n\n` +
        `–ï–Ω–¥—ñ —Å—ñ–∑ –∂–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∞–ª–∞—Å—ã–∑!\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö!`,
        { parse_mode: 'Markdown' }
      );

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
  async handleStatus(msg, match) {
    const chatId = msg.chat.id;
    const ticketId = match[1];
    await this.checkTicketStatus(chatId, ticketId);
  }

  async checkTicketStatus(chatId, ticketId) {
    try {
      const [tickets] = await pool.query(
        `SELECT * FROM tickets WHERE id = ?`,
        [ticketId]
      );

      if (tickets.length === 0) {
        await this.bot.sendMessage(chatId, `‚ùå ”®—Ç—ñ–Ω—ñ—à #${ticketId} —Ç–∞–±—ã–ª–º–∞–¥—ã / –ó–∞—è–≤–∫–∞ #${ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }

      const ticket = tickets[0];
      const statusEmoji = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'pending': '‚è∏Ô∏è',
        'resolved': '‚úÖ',
        'closed': 'üîí'
      };

      const message = `
${statusEmoji[ticket.status] || 'üìã'} *”®—Ç—ñ–Ω—ñ—à #${ticketId}*

üìù *–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:* ${ticket.subject}
üìä *–ö“Ø–π / –°—Ç–∞—Ç—É—Å:* ${this.getStatusName(ticket.status)}
üìÖ *“ö“±—Ä—ã–ª“ì–∞–Ω / –°–æ–∑–¥–∞–Ω–∞:* ${new Date(ticket.created_at).toLocaleString('kk-KZ')}
üîÑ *–ñ–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω / –û–±–Ω–æ–≤–ª–µ–Ω–∞:* ${new Date(ticket.updated_at).toLocaleString('kk-KZ')}

${ticket.assigned_to ? `üë§ *–û—Ä—ã–Ω–¥–∞—É—à—ã / –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ID ${ticket.assigned_to}` : ''}
${ticket.status === 'resolved' ? '\n‚úÖ *–ú”ô—Å–µ–ª–µ —à–µ—à—ñ–ª–¥—ñ / –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞*' : ''}`;

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü–æ–∫–∞–∑ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showMyTickets(chatId, telegramUserId) {
    try {
      const [tickets] = await pool.query(
        `SELECT * FROM tickets 
         WHERE JSON_EXTRACT(metadata, '$.telegram_user_id') = ?
         OR JSON_EXTRACT(metadata, '$.telegram_chat_id') = ?
         ORDER BY created_at DESC
         LIMIT 10`,
        [telegramUserId.toString(), chatId.toString()]
      );

      if (tickets.length === 0) {
        await this.bot.sendMessage(chatId, '–°—ñ–∑–¥–µ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä –∂–æ“õ / –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫');
        return;
      }

      let message = '*üìã –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ“£—ñ–∑ / –í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n\n';
      
      for (const ticket of tickets) {
        const statusEmoji = {
          'new': 'üÜï',
          'in_progress': '‚è≥',
          'pending': '‚è∏Ô∏è',
          'resolved': '‚úÖ',
          'closed': 'üîí'
        }[ticket.status] || 'üìã';

        message += `${statusEmoji} #${ticket.id} - ${ticket.subject}\n`;
        message += `_${new Date(ticket.created_at).toLocaleDateString('ru-RU')}_\n\n`;
      }

      message += '_–ö“Ø–π–¥—ñ —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω / –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:_ /status [–Ω–æ–º–µ—Ä]';

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü–æ–º–æ—â—å
  async showHelp(chatId) {
    const helpText = `
‚ùì *–ö”©–º–µ–∫ / –ü–æ–º–æ—â—å*

üìå *–ù–µ–≥—ñ–∑–≥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä / –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ö”©–º–µ–∫ / –ü–æ–º–æ—â—å
/status [–Ω–æ–º–µ—Ä] - ”®—Ç—ñ–Ω—ñ—à –∫“Ø–π—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
/mytickets - –ú–µ–Ω—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ–º / –ú–æ–∏ –∑–∞—è–≤–∫–∏
/cancel - ”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–æ“õ—Ç–∞—Ç—É / –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ

üìù *”®—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É / –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:*
1. /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ / –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
2. "–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑ / –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
3. –ë–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑ / –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
4. ”®—Ç—ñ–Ω—ñ—à—Ç—ñ —Ä–∞—Å—Ç–∞“£—ã–∑ / –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É

üí° *–ö–µ“£–µ—Å—Ç–µ—Ä / –°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ú”ô—Å–µ–ª–µ–Ω—ñ —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑ / –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—Ç–∞—Ä “õ–æ—Å—ã“£—ã–∑ / –ü—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
‚Ä¢ –î“±—Ä—ã—Å –±–∞–π–ª–∞–Ω—ã—Å –∞“õ–ø–∞—Ä–∞—Ç—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑ / –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã`;

    await this.bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
  }

  // –ö–æ–Ω—Ç–∞–∫—Ç—ã
  async showContacts(chatId) {
    const contactsText = `
‚òéÔ∏è *–ë–∞–π–ª–∞–Ω—ã—Å –∞“õ–ø–∞—Ä–∞—Ç—ã / –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

üè¢ *–ê–ª–∞—Ç–∞—É –°—Ç—Ä–æ–π –ò–Ω–≤–µ—Å—Ç*

üìû *–¢–µ–ª–µ—Ñ–æ–Ω / –¢–µ–ª–µ—Ñ–æ–Ω:*
+7 (727) 355-00-00

üìß *Email:*
it-support@alataustroyinvest.kz

üïê *–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã / –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:*
–î“Ø–π—Å–µ–Ω–±—ñ-–ñ“±–º–∞ / –ü–Ω-–ü—Ç: 8:00 - 18:00
–°–µ–Ω–±—ñ / –°–±: 9:00 - 13:00

üÜò *–¢”ô—É–ª—ñ–∫ –±–æ–π—ã IT “õ–æ–ª–¥–∞—É / –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è IT –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*
+7 (777) 013-1838

üìç *–ú–µ–∫–µ–Ω–∂–∞–π / –ê–¥—Ä–µ—Å:*
“ö–∞–∑–∞“õ—Å—Ç–∞–Ω, –ê–ª–º–∞—Ç—ã “õ., “ö.”ò–∑—ñ—Ä–±–∞–µ–≤ –∫., 161–±
–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ö. –ê–∑–µ—Ä–±–∞–µ–≤–∞, 161–±`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìû –î–µ—Ä–µ—É “õ–æ“£—ã—Ä–∞—É —à–∞–ª—É / –ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–π—á–∞—Å', url: 'tel:+77770131838' }
        ],
        [
          { text: 'üìß Email –∂—ñ–±–µ—Ä—É / –û—Ç–ø—Ä–∞–≤–∏—Ç—å Email', url: 'mailto:it-support@alataustroyinvest.kz' }
        ],
        [
          { text: 'üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, contactsText, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å
  async showUrgentHelp(chatId) {
    const urgentText = `
üö® *–®“∞“í–´–õ –ö”®–ú–ï–ö / –°–†–û–ß–ù–ê–Ø –ü–û–ú–û–©–¨*

üî¥ *–ú—ã–Ω–∞ –∂–∞“ì–¥–∞–π–ª–∞—Ä–¥–∞ –¥–µ—Ä–µ—É “õ–æ“£—ã—Ä–∞—É —à–∞–ª—ã“£—ã–∑ / –ó–≤–æ–Ω–∏—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ:*

üî• *”®—Ä—Ç “õ–∞—É—ñ–ø—Ç—ñ –∂–∞“ì–¥–∞–π / –ü–æ–∂–∞—Ä–æ–æ–ø–∞—Å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è*
üìû 101 –Ω–µ–º–µ—Å–µ / –∏–ª–∏ +7 (777) 013-1838

‚ö° *–≠–ª–µ–∫—Ç—Ä –∂“Ø–π–µ—Å—ñ –∞–ø–∞—Ç—Ç—ã / –ê–≤–∞—Ä–∏—è —ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–∏*
üìû –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç: 180
üìû –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: +7 (777) 013-1838

üíß *–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –∞–ø–∞—Ç—ã / –ê–≤–∞—Ä–∏—è –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–∞*
üìû –í–æ–¥–æ–∫–∞–Ω–∞–ª: 109
üìû –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: +7 (777) 013-1838

üñ•Ô∏è *–ú–∞“£—ã–∑–¥—ã –∂“Ø–π–µ–ª–µ—Ä —ñ—Å—Ç–µ–º–µ–π–¥—ñ / –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç*
üìû IT –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7: +7 (777) 013-1838

üè¢ *“í–∏–º–∞—Ä–∞—Ç “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–≥—ñ / –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–¥–∞–Ω–∏—è*
üìû –û—Ö—Ä–∞–Ω–∞: +7 (727) 355-00-00

‚ö†Ô∏è *–ë–∞—Å“õ–∞ –∞–ø–∞—Ç—Ç—ã“õ –∂–∞“ì–¥–∞–π–ª–∞—Ä / –î—Ä—É–≥–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏*
üìû +7 (777) 013-1838

_–ë–∞—Å“õ–∞ –º”ô—Å–µ–ª–µ–ª–µ—Ä “Ø—à—ñ–Ω “õ–∞—Ä–∞–ø–∞–π—ã–º ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞“£—ã–∑_
_–î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ã—á–Ω—É—é –∑–∞—è–≤–∫—É_`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üö® –®“±“ì—ã–ª ”©—Ç—ñ–Ω—ñ—à / –°—Ä–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞', callback_data: 'urgent_ticket' }
        ],
        [
          { text: 'üìû IT “ö–æ–ª–¥–∞—É / IT –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'tel:+77770131838' },
          { text: 'üè¢ –û—Ñ–∏—Å / –û—Ñ–∏—Å', url: 'tel:+77273550000' }
        ],
        [
          { text: 'üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, urgentText, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // FAQ - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  async showFAQ(chatId) {
    const faqText = `
üìã *–ñ–ò–Ü “ö–û–ô–´–õ–ê–¢–´–ù –°“∞–†–ê“ö–¢–ê–† / –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´*

‚ùì *–ö–æ–º–ø—å—é—Ç–µ—Ä “õ–æ—Å—ã–ª–º–∞–π–¥—ã / –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è*
üî∏ “ö—É–∞—Ç –∫–∞–±–µ–ª—ñ–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–±–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è
üî∏ “ö–æ—Å“õ—ã—à—Ç—ã –±–∞—Å—ã–ø –∫”©—Ä—ñ“£—ñ–∑ / –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è
üî∏ UPS “õ–æ—Å—ã–ª“ì–∞–Ω—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ UPS

‚ùì *–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∂“±–º—ã—Å —ñ—Å—Ç–µ–º–µ–π–¥—ñ / –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç*
üî∏ Wi-Fi “õ–æ—Å—ã–ª“ì–∞–Ω—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Wi-Fi
üî∏ –†–æ—É—Ç–µ—Ä–¥—ñ “õ–∞–π—Ç–∞ “õ–æ—Å—ã“£—ã–∑ / –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä
üî∏ –ö–∞–±–µ–ª—å “õ–æ—Å—ã–ª—É—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–µ–ª—è

‚ùì *–ü—Ä–∏–Ω—Ç–µ—Ä –±–∞—Å—ã–ø —à—ã“ì–∞—Ä–º–∞–π–¥—ã / –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç*
üî∏ “ö–∞“ì–∞–∑ –±–∞—Ä –º–∞ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –±—É–º–∞–≥–∏
üî∏ –°–∏—è –∫–∞—Ä—Ç—Ä–∏–¥–∂—ñ–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂
üî∏ –ü—Ä–∏–Ω—Ç–µ—Ä–¥—ñ “õ–∞–π—Ç–∞ “õ–æ—Å—ã“£—ã–∑ / –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä

‚ùì *“ö“±–ø–∏—è —Å”©–∑–¥—ñ “±–º—ã—Ç—Ç—ã–º / –ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å*
üî∏ IT “õ—ã–∑–º–µ—Ç—ñ–Ω–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑ / –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT —Å–ª—É–∂–±—É
üî∏ ”®—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞“£—ã–∑ / –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É
üî∏ –ñ–µ–∫–µ –∫—É”ô–ª—ñ–≥—ñ“£—ñ–∑–¥—ñ –¥–∞–π—ã–Ω–¥–∞“£—ã–∑ / –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ

‚ùì *–§–∞–π–ª–¥–∞—Ä –∂–æ“ì–∞–ª–¥—ã / –§–∞–π–ª—ã –ø—Ä–æ–ø–∞–ª–∏*
üî∏ –ö–æ—Ä–∑–∏–Ω–∞–Ω—ã —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä–∑–∏–Ω—É
üî∏ OneDrive/–æ–±–ª–∞–∫—Ç—ã —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OneDrive/–æ–±–ª–∞–∫–æ
üî∏ –î–µ—Ä–µ—É IT-–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑ / –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîç –ú”ô—Å–µ–ª–µ–Ω—ñ —Ç–∞–±–∞ –∞–ª–º–∞–¥—ã–º / –ù–µ –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—É', callback_data: 'new_ticket' }
        ],
        [
          { text: 'üí¨ –°“±—Ä–∞“õ “õ–æ—é / –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' },
          { text: 'üìû “ö–æ“£—ã—Ä–∞—É —à–∞–ª—É / –ü–æ–∑–≤–æ–Ω–∏—Ç—å', url: 'tel:+77770131838' }
        ],
        [
          { text: 'üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, faqText, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –ó–∞–ø—Ä–æ—Å ID –∑–∞—è–≤–∫–∏
  async askForTicketId(chatId) {
    this.userStates.set(chatId, {
      step: 'awaiting_ticket_id'
    });
    
    await this.bot.sendMessage(chatId, 
      'üîç *”®—Ç—ñ–Ω—ñ—à –Ω”©–º—ñ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ / –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:*\n' +
      '_–ú—ã—Å–∞–ª—ã / –ù–∞–ø—Ä–∏–º–µ—Ä: 123_',
      { parse_mode: 'Markdown' }
    );
  }

  // –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  async handleShowActiveTickets(msg) {
    const chatId = msg.chat.id;
    
    if (!this.isAdmin(chatId)) {
      await this.bot.sendMessage(chatId, '‚ùå –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–ª–µ—Ä “Ø—à—ñ–Ω / –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
      return;
    }

    try {
      const [tickets] = await pool.query(
        `SELECT t.*, 
         JSON_UNQUOTE(JSON_EXTRACT(t.requester_metadata, '$.name')) as requester_name
         FROM tickets t 
         WHERE t.status IN ('new', 'in_progress', 'pending')
         ORDER BY 
           CASE t.priority 
             WHEN 'urgent' THEN 1
             WHEN 'high' THEN 2
             WHEN 'medium' THEN 3
             WHEN 'low' THEN 4
           END,
           t.created_at DESC
         LIMIT 20`
      );

      if (tickets.length === 0) {
        await this.bot.sendMessage(chatId, '‚úÖ –ê–∫—Ç–∏–≤ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä –∂–æ“õ / –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫');
        return;
      }

      let message = '*üìã –ê–ö–¢–ò–í ”®–¢–Ü–ù–Ü–®–¢–ï–† / –ê–ö–¢–ò–í–ù–´–ï –ó–ê–Ø–í–ö–ò:*\n\n';
      
      for (const ticket of tickets) {
        const priorityEmoji = {
          'low': 'üü¢',
          'medium': 'üü°',
          'high': 'üü†',
          'urgent': 'üî¥'
        }[ticket.priority] || '‚ö™';

        const statusEmoji = {
          'new': 'üÜï',
          'in_progress': '‚è≥',
          'pending': '‚è∏Ô∏è'
        }[ticket.status] || 'üìã';

        message += `${priorityEmoji} ${statusEmoji} #${ticket.id} - ${ticket.subject}\n`;
        message += `üë§ ${ticket.requester_name || '–ë–µ–ª–≥—ñ—Å—ñ–∑ / –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        message += `_${new Date(ticket.created_at).toLocaleDateString('ru-RU')} ${new Date(ticket.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}_\n\n`;
      }

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  async handleAdminStats(msg) {
    const chatId = msg.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!this.isAdmin(chatId)) {
      await this.bot.sendMessage(chatId, '‚ùå –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–ª–µ—Ä “Ø—à—ñ–Ω / –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const [stats] = await pool.query(`
        SELECT 
          COUNT(*) as total,
          SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
          SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
          SUM(CASE WHEN status = 'resolved' THEN 1 ELSE 0 END) as resolved,
          SUM(CASE WHEN status = 'closed' THEN 1 ELSE 0 END) as closed,
          SUM(CASE WHEN priority = 'urgent' THEN 1 ELSE 0 END) as urgent
        FROM tickets 
        WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
      `);

      const stat = stats[0];

      const message = `
üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 30 –ö“Æ–ù / –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 30 –î–ù–ï–ô*

üìã *–ë–∞—Ä–ª—ã“ì—ã / –í—Å–µ–≥–æ:* ${stat.total}
üÜï *–ñ–∞“£–∞ / –ù–æ–≤—ã—Ö:* ${stat.new}
‚è≥ *”®“£–¥–µ–ª—É–¥–µ / –í —Ä–∞–±–æ—Ç–µ:* ${stat.in_progress}
‚úÖ *–®–µ—à—ñ–ª–≥–µ–Ω / –†–µ—à–µ–Ω–æ:* ${stat.resolved}
üîí *–ñ–∞–±—ã–ª“ì–∞–Ω / –ó–∞–∫—Ä—ã—Ç–æ:* ${stat.closed}
üî¥ *–®“±“ì—ã–ª / –°—Ä–æ—á–Ω—ã—Ö:* ${stat.urgent}

_–ñ–∞“£–∞—Ä—Ç—ã–ª–¥—ã / –û–±–Ω–æ–≤–ª–µ–Ω–æ:_ ${new Date().toLocaleString('kk-KZ')}`;

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  async handleCancel(msg) {
    const chatId = msg.chat.id;
    this.userStates.delete(chatId);
    await this.bot.sendMessage(chatId, '‚ùå ”ò—Ä–µ–∫–µ—Ç —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã / –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    await this.handleStart(msg);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  async handlePhoto(msg) {
    const chatId = msg.chat.id;
    const userState = this.userStates.get(chatId);

    if (!userState || !userState.ticketData) {
      await this.bot.sendMessage(chatId, 
        '–ê–ª–¥—ã–º–µ–Ω ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞“£—ã–∑ / –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É\n/start'
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –¥–ª—è –±—É–¥—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (!userState.ticketData.attachments) {
      userState.ticketData.attachments = [];
    }
    
    userState.ticketData.attachments.push({
      type: 'photo',
      fileId: msg.photo[msg.photo.length - 1].file_id
    });

    await this.bot.sendMessage(chatId, 
      'üì∏ –§–æ—Ç–æ “õ–æ—Å—ã–ª–¥—ã / –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n' +
      '–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  async handleDocument(msg) {
    const chatId = msg.chat.id;
    const userState = this.userStates.get(chatId);

    if (!userState || !userState.ticketData) {
      await this.bot.sendMessage(chatId, 
        '–ê–ª–¥—ã–º–µ–Ω ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞“£—ã–∑ / –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É\n/start'
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    if (!userState.ticketData.attachments) {
      userState.ticketData.attachments = [];
    }
    
    userState.ticketData.attachments.push({
      type: 'document',
      fileId: msg.document.file_id,
      fileName: msg.document.file_name
    });

    await this.bot.sendMessage(chatId, 
      'üìé –§–∞–π–ª “õ–æ—Å—ã–ª–¥—ã / –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω\n' +
      '–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑ / –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'
    );
  }

  // –£—Ç–∏–ª–∏—Ç—ã
  validateEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }


  getPriorityName(priorityId) {
    const priorities = {
      'low': '–¢”©–º–µ–Ω / –ù–∏–∑–∫–∏–π',
      'medium': '–û—Ä—Ç–∞—à–∞ / –°—Ä–µ–¥–Ω–∏–π',
      'high': '–ñ–æ“ì–∞—Ä—ã / –í—ã—Å–æ–∫–∏–π',
      'urgent': '–®“±“ì—ã–ª / –°—Ä–æ—á–Ω—ã–π'
    };
    return priorities[priorityId] || priorityId;
  }

  getTypeName(typeId) {
    const types = {
      'support_request': '–°“±—Ä–∞—É / –ó–∞–ø—Ä–æ—Å',
      'complaint': '–®–∞“ì—ã–º / –ñ–∞–ª–æ–±–∞',
      'incident': '–ò–Ω—Ü–∏–¥–µ–Ω—Ç / –ò–Ω—Ü–∏–¥–µ–Ω—Ç'
    };
    return types[typeId] || typeId;
  }

  getStatusName(statusId) {
    const statuses = {
      'new': '–ñ–∞“£–∞ / –ù–æ–≤–∞—è',
      'in_progress': '”®“£–¥–µ–ª—É–¥–µ / –í —Ä–∞–±–æ—Ç–µ',
      'pending': '–ö“Ø—Ç—É–¥–µ / –í –æ–∂–∏–¥–∞–Ω–∏–∏',
      'resolved': '–®–µ—à—ñ–ª–¥—ñ / –†–µ—à–µ–Ω–∞',
      'closed': '–ñ–∞–±—ã–ª–¥—ã / –ó–∞–∫—Ä—ã—Ç–∞',
      'telegram_pending': 'Telegram –∞—Ä“õ—ã–ª—ã –∫“Ø—Ç—É–¥–µ / –û–∂–∏–¥–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram',
      'whatsapp_pending': 'WhatsApp –∞—Ä“õ—ã–ª—ã –∫“Ø—Ç—É–¥–µ / –û–∂–∏–¥–∞–µ—Ç —á–µ—Ä–µ–∑ WhatsApp'
    };
    return statuses[statusId] || statusId;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
  isAdmin(chatId) {
    return this.adminChatIds.includes(chatId.toString()) || 
           this.moderatorChatIds.includes(chatId.toString());
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram
  async sendMessageToUser(ticketId, message, fromStaff = true) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∏ Telegram chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const [tickets] = await pool.query(
        `SELECT t.*, JSON_EXTRACT(t.metadata, '$.telegram_chat_id') as telegram_chat_id
         FROM tickets t 
         WHERE t.id = ?`,
        [ticketId]
      );

      if (tickets.length === 0) {
        throw new Error(`Ticket #${ticketId} not found`);
      }

      const ticket = tickets[0];
      const chatId = ticket.telegram_chat_id;

      if (!chatId) {
        throw new Error(`No Telegram chat_id found for ticket #${ticketId}`);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const staffPrefix = fromStaff ? 'üë®‚Äçüíº *“ö–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ / –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n\n' : '';
      const ticketInfo = `\n\nüìã *”®—Ç—ñ–Ω—ñ—à / –ó–∞—è–≤–∫–∞:* #${ticketId}`;
      
      const fullMessage = `${staffPrefix}${message}${ticketInfo}`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üí¨ –ñ–∞—É–∞–ø –±–µ—Ä—É / –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_${ticketId}` }
          ],
          [
            { text: 'üìä –ö“Ø–π–¥—ñ –∫”©—Ä—É / –°—Ç–∞—Ç—É—Å', callback_data: `status_${ticketId}` },
            { text: 'üìã –ú–µ–Ω—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ–º / –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'my_tickets' }
          ]
        ]
      };

      await this.bot.sendMessage(chatId, fullMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      return true;
    } catch (error) {
      console.error('Error sending message to user via Telegram:', error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
  async notifyStatusChange(ticketId, newStatus, comment = '') {
    try {
      const statusEmoji = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'pending': '‚è∏Ô∏è',
        'resolved': '‚úÖ',
        'closed': 'üîí'
      };

      const statusText = this.getStatusName(newStatus);
      const emoji = statusEmoji[newStatus] || 'üìã';
      
      let message = `${emoji} *”®—Ç—ñ–Ω—ñ—à –∫“Ø–π—ñ ”©–∑–≥–µ—Ä–¥—ñ / –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω*\n\n`;
      message += `üìä *–ñ–∞“£–∞ –∫“Ø–π / –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* ${statusText}`;
      
      if (comment) {
        message += `\n\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n${comment}`;
      }

      await this.sendMessageToUser(ticketId, message, true);
    } catch (error) {
      console.error('Error notifying status change:', error);
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  async notifyNewMessage(ticketId, messageText, staffName = '') {
    try {
      const staffInfo = staffName ? ` (${staffName})` : '';
      let message = `üí¨ *–ñ–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ / –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*${staffInfo}\n\n`;
      message += messageText;

      await this.sendMessageToUser(ticketId, message, true);
    } catch (error) {
      console.error('Error notifying new message:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async handleReplyCallback(query) {
    const chatId = query.message.chat.id;
    const ticketId = query.data.replace('reply_', '');
    
    await this.bot.answerCallbackQuery(query.id);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    this.userStates.set(chatId, {
      state: 'replying',
      ticketId: ticketId,
      step: 'message'
    });

    const replyMessage = `
üí¨ *”®—Ç—ñ–Ω—ñ—à #${ticketId} “Ø—à—ñ–Ω –∂–∞—É–∞–ø / –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #${ticketId}*

–°—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:
_–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:_

–ë–æ–ª–¥—ã—Ä–º–∞—É “Ø—à—ñ–Ω /cancel –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑
_–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel_`;

    await this.bot.sendMessage(chatId, replyMessage, { parse_mode: 'Markdown' });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏
  async handleStatusCallback(query) {
    const chatId = query.message.chat.id;
    const ticketId = query.data.replace('status_', '');
    
    await this.bot.answerCallbackQuery(query.id);
    await this.checkTicketStatus(chatId, ticketId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async processUserReply(chatId, messageText, ticketId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const [userData] = await pool.query(
        'SELECT first_name, last_name FROM users WHERE telegram_chat_id = ?',
        [chatId]
      );

      const userName = userData.length > 0 
        ? `${userData[0].first_name || ''} ${userData[0].last_name || ''}`.trim()
        : 'Telegram User';

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
      await pool.query(
        `INSERT INTO ticket_messages (ticket_id, sender_type, message, metadata) 
         VALUES (?, ?, ?, ?)`,
        [
          ticketId,
          'user',
          messageText,
          JSON.stringify({
            source: 'telegram',
            telegram_chat_id: chatId,
            sender_name: userName
          })
        ]
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
      await pool.query(
        'UPDATE tickets SET updated_at = NOW() WHERE id = ?',
        [ticketId]
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      await this.notifyAdminsUserReply(ticketId, messageText, userName);

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const confirmMessage = `
‚úÖ *–°—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ / –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*

üìã *”®—Ç—ñ–Ω—ñ—à / –ó–∞—è–≤–∫–∞:* #${ticketId}
üí¨ *–•–∞–±–∞—Ä–ª–∞–º–∞ / –°–æ–æ–±—â–µ–Ω–∏–µ:* ${messageText.length > 100 ? messageText.substring(0, 100) + '...' : messageText}

–ë—ñ–∑ —Å—ñ–∑–±–µ–Ω –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ –±–∞–π–ª–∞–Ω—ã—Å–∞–º—ã–∑.
_–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è._`;

      await this.bot.sendMessage(chatId, confirmMessage, { parse_mode: 'Markdown' });

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userStates.delete(chatId);

    } catch (error) {
      console.error('Error processing user reply:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async notifyAdminsUserReply(ticketId, messageText, userName) {
    try {
      const message = `
üí¨ *–ñ–ê“¢–ê –•–ê–ë–ê–†–õ–ê–ú–ê / –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï*

üé´ *”®—Ç—ñ–Ω—ñ—à / –ó–∞—è–≤–∫–∞:* #${ticketId}
üë§ *–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã / –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${userName}

üìù *–•–∞–±–∞—Ä–ª–∞–º–∞ / –°–æ–æ–±—â–µ–Ω–∏–µ:*
${messageText}

üì≤ *–ö”©–∑ / –ò—Å—Ç–æ—á–Ω–∏–∫:* Telegram`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
      const allAdminChatIds = [...this.adminChatIds, ...this.moderatorChatIds];
      
      for (const adminChatId of allAdminChatIds) {
        try {
          const keyboard = {
            inline_keyboard: [
              [
                { text: 'üí¨ –ñ–∞—É–∞–ø –±–µ—Ä—É / –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `admin_reply_${ticketId}` },
                { text: 'üìã ”®—Ç—ñ–Ω—ñ—à / –ó–∞—è–≤–∫–∞', callback_data: `admin_view_${ticketId}` }
              ]
            ]
          };

          await this.bot.sendMessage(adminChatId, message, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
        } catch (error) {
          console.error(`Error sending notification to admin ${adminChatId}:`, error);
        }
      }
    } catch (error) {
      console.error('Error notifying admins about user reply:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async processAdminReply(chatId, messageText, ticketId, adminId, adminName) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
      await pool.query(
        `INSERT INTO ticket_messages (ticket_id, sender_type, sender_id, message, metadata) 
         VALUES (?, ?, ?, ?, ?)`,
        [
          ticketId,
          'staff',
          adminId,
          messageText,
          JSON.stringify({
            source: 'telegram_admin',
            telegram_chat_id: chatId,
            sender_name: adminName
          })
        ]
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
      await pool.query(
        'UPDATE tickets SET updated_at = NOW() WHERE id = ?',
        [ticketId]
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
      await this.sendMessageToUser(ticketId, messageText, true);

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      const confirmMessage = `
‚úÖ *–•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ / –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*

üé´ *”®—Ç—ñ–Ω—ñ—à / –ó–∞—è–≤–∫–∞:* #${ticketId}
üë§ *“ö–∞–±—ã–ª–¥–∞—É—à—ã / –ü–æ–ª—É—á–∞—Ç–µ–ª—å:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏
üí¨ *–•–∞–±–∞—Ä–ª–∞–º–∞ / –°–æ–æ–±—â–µ–Ω–∏–µ:* ${messageText.length > 100 ? messageText.substring(0, 100) + '...' : messageText}

üì≤ *–ñ—ñ–±–µ—Ä—ñ–ª–¥—ñ / –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑:* Telegram`;

      await this.bot.sendMessage(chatId, confirmMessage, { 
        parse_mode: 'Markdown' 
      });

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      this.userStates.delete(chatId);

    } catch (error) {
      console.error('Error processing admin reply:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
  async confirmTicketCreation(chatId) {
    const userState = this.userStates.get(chatId);
    if (!userState || !userState.ticketData) {
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ: –¥–µ—Ä–µ–∫—Ç–µ—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã / –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    await this.createTicket(chatId, userState.ticketData, chatId);
  }

  // –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
  async cancelTicketCreation(chatId) {
    this.userStates.delete(chatId);
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };
    
    await this.bot.sendMessage(chatId, '‚ùå ”®—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É–¥–∞–Ω –±–∞—Å —Ç–∞—Ä—Ç—ã–ª–¥—ã / –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
      reply_markup: keyboard
    });
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
  async editTicket(chatId) {
    const userState = this.userStates.get(chatId);
    if (!userState || !userState.ticketData) {
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ: –¥–µ—Ä–µ–∫—Ç–µ—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã / –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞', callback_data: 'edit_subject' },
          { text: 'üìÑ –°–∏–ø–∞—Ç—Ç–∞–º–∞ / –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'edit_description' }
        ],
        [
          { text: 'üë§ –ê—Ç—ã-–∂”©–Ω—ñ / –§–ò–û', callback_data: 'edit_name' },
          { text: 'üìß Email', callback_data: 'edit_email' }
        ],
        [
          { text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω', callback_data: 'edit_phone' },
          { text: '‚ö° –ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', callback_data: 'edit_priority' }
        ],
        [
          { text: '‚úÖ –î–∞–π—ã–Ω / –ì–æ—Ç–æ–≤–æ', callback_data: 'confirm_ticket' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, '‚úèÔ∏è –ù–µ ”©–∑–≥–µ—Ä—Ç–∫—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ? / –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', {
      reply_markup: keyboard
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏
  async showMyTickets(chatId, telegramUserId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const [tickets] = await pool.query(
        `SELECT id, subject, status, priority, created_at
         FROM tickets 
         WHERE JSON_EXTRACT(metadata, '$.telegram_chat_id') = ?
         OR JSON_EXTRACT(metadata, '$.telegram_user_id') = ?
         ORDER BY created_at DESC
         LIMIT 10`,
        [chatId, telegramUserId]
      );

      if (tickets.length === 0) {
        const keyboard = {
          inline_keyboard: [
            [
              { text: 'üìù –ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à / –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', callback_data: 'new_ticket' }
            ],
            [
              { text: 'üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        };

        await this.bot.sendMessage(chatId, 
          'üì≠ –°—ñ–∑–¥–µ ”ô–ª—ñ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä –∂–æ“õ / –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫', 
          { reply_markup: keyboard }
        );
        return;
      }

      let message = 'üìã *–°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ“£—ñ–∑ / –í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n\n';

      const keyboard = {
        inline_keyboard: []
      };

      tickets.forEach((ticket, index) => {
        const statusEmoji = {
          'new': 'üÜï',
          'in_progress': '‚è≥',
          'pending': '‚è∏Ô∏è',
          'resolved': '‚úÖ',
          'closed': 'üîí'
        }[ticket.status] || 'üìã';

        const priorityEmoji = {
          'low': 'üü¢',
          'medium': 'üü°',
          'high': 'üü†',
          'urgent': 'üî¥'
        }[ticket.priority] || '‚ö™';

        message += `${index + 1}. ${statusEmoji} *#${ticket.id}* - ${ticket.subject}\n`;
        message += `   ${priorityEmoji} ${this.getStatusName(ticket.status)}\n`;
        message += `   üìÖ ${new Date(ticket.created_at).toLocaleDateString('ru-RU')}\n\n`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        keyboard.inline_keyboard.push([{
          text: `#${ticket.id} - ${ticket.subject.substring(0, 30)}${ticket.subject.length > 30 ? '...' : ''}`,
          callback_data: `ticket_${ticket.id}`
        }]);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      keyboard.inline_keyboard.push([
        { text: 'üìù –ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à / –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', callback_data: 'new_ticket' }
      ]);
      keyboard.inline_keyboard.push([
        { text: 'üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]);

      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–æ–π
  async handleTicketAction(query) {
    const chatId = query.message.chat.id;
    const ticketId = query.data.replace('ticket_', '');
    
    await this.bot.answerCallbackQuery(query.id);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
      const [tickets] = await pool.query(
        `SELECT * FROM tickets WHERE id = ?`,
        [ticketId]
      );

      if (tickets.length === 0) {
        await this.bot.sendMessage(chatId, '‚ùå ”®—Ç—ñ–Ω—ñ—à —Ç–∞–±—ã–ª–º–∞–¥—ã / –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const ticket = tickets[0];
      
      const statusEmoji = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'pending': '‚è∏Ô∏è',
        'resolved': '‚úÖ',
        'closed': 'üîí'
      }[ticket.status] || 'üìã';

      const priorityEmoji = {
        'low': 'üü¢',
        'medium': 'üü°',
        'high': 'üü†',
        'urgent': 'üî¥'
      }[ticket.priority] || '‚ö™';

      let message = `üìã *”®—Ç—ñ–Ω—ñ—à / –ó–∞—è–≤–∫–∞ #${ticket.id}*\n\n`;
      message += `üìù *–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞:* ${ticket.subject}\n`;
      message += `${statusEmoji} *–ö“Ø–π—ñ / –°—Ç–∞—Ç—É—Å:* ${this.getStatusName(ticket.status)}\n`;
      message += `${priorityEmoji} *–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityName(ticket.priority)}\n`;
      message += `üìÖ *“ö“±—Ä—ã–ª“ì–∞–Ω / –°–æ–∑–¥–∞–Ω–∞:* ${new Date(ticket.created_at).toLocaleString('ru-RU')}\n\n`;
      message += `üìÑ *–°–∏–ø–∞—Ç—Ç–∞–º–∞ / –û–ø–∏—Å–∞–Ω–∏–µ:*\n${ticket.description}`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üí¨ –•–∞–±–∞—Ä–ª–∞–º–∞ “õ–æ—Å—É / –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: `reply_${ticket.id}` }
          ]
        ]
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —Ä–µ—à–µ–Ω–∞
      if (ticket.status === 'resolved') {
        keyboard.inline_keyboard.push([
          { text: 'üîí –ñ–∞–±—É / –ó–∞–∫—Ä—ã—Ç—å', callback_data: `close_${ticket.id}` }
        ]);
      }

      keyboard.inline_keyboard.push([
        { text: 'üîô ”®—Ç—ñ–Ω—ñ—à—Ç–µ—Ä–≥–µ –æ—Ä–∞–ª—É / –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–∞–º', callback_data: 'my_tickets' }
      ]);

      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞—è–≤–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ó–∞–ø—Ä–æ—Å ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  async askForTicketId(chatId) {
    this.userStates.set(chatId, {
      step: 'awaiting_ticket_id'
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ùå –ë–æ–ª–¥—ã—Ä–º–∞—É / –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'main_menu' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, 
      'üîç *”®—Ç—ñ–Ω—ñ—à –Ω”©–º—ñ—Ä—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ / –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:*\n\n_–ú—ã—Å–∞–ª—ã / –ù–∞–ø—Ä–∏–º–µ—Ä: 123_', 
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–æ—á–Ω—É—é –ø–æ–º–æ—â—å
  async showUrgentHelp(chatId) {
    const text = `
üö® *–®“∞“í–´–õ –ö”®–ú–ï–ö / –°–†–û–ß–ù–ê–Ø –ü–û–ú–û–©–¨*

‚ö° *–ö—Ä–∏—Ç–∏–∫–∞–ª—ã“õ –º”ô—Å–µ–ª–µ–ª–µ—Ä “Ø—à—ñ–Ω / –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º:*

üìû *–¢—ñ–∫–µ–ª–µ–π “õ–æ“£—ã—Ä–∞—É —à–∞–ª—ã“£—ã–∑ / –ó–≤–æ–Ω–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é:*
+7 (777) 013-18-38

üïê *–ñ“±–º—ã—Å —É–∞“õ—ã—Ç—ã / –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:*
–î“Ø–π—Å–µ–Ω–±—ñ-–ñ“±–º–∞ / –ü–Ω-–ü—Ç: 09:00 - 18:00

‚ö†Ô∏è *–®“±“ì—ã–ª –∂–∞“ì–¥–∞–π–ª–∞—Ä / –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏:*
‚Ä¢ –ñ“Ø–π–µ–Ω—ñ“£ —Ç–æ–ª—ã“õ —ñ—Å—Ç–µ–Ω —à—ã“ì—É—ã / –ü–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ“£ –∂–æ“ì–∞–ª—É—ã / –ü–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ö–∏–±–µ—Ä—à–∞–±—É—ã–ª –±–µ–ª–≥—ñ–ª–µ—Ä—ñ / –ü—Ä–∏–∑–Ω–∞–∫–∏ –∫–∏–±–µ—Ä–∞—Ç–∞–∫–∏
‚Ä¢ –ú–∞“£—ã–∑–¥—ã –∂–∞–±–¥—ã“õ—Ç—ã“£ —ñ—Å—Ç–µ–Ω —à—ã“ì—É—ã / –í—ã—Ö–æ–¥ –∏–∑ —Å—Ç—Ä–æ—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

üí° *–ù–µ —ñ—Å—Ç–µ—É –∫–µ—Ä–µ–∫ / –ß—Ç–æ –¥–µ–ª–∞—Ç—å:*
1. –î–µ—Ä–µ—É “õ–æ“£—ã—Ä–∞—É —à–∞–ª—ã“£—ã–∑ / –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ
2. –ú”ô—Å–µ–ª–µ–Ω—ñ “õ—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑ / –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É
3. –ù“±—Å“õ–∞—É–ª–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞“£—ã–∑ / –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìû “ö–∞–∑—ñ—Ä “õ–æ“£—ã—Ä–∞—É —à–∞–ª—É / –ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–π—á–∞—Å', url: 'tel:+77770131838' }
        ],
        [
          { text: 'üö® –®“±“ì—ã–ª ”©—Ç—ñ–Ω—ñ—à –∂–∞—Å–∞—É / –°–æ–∑–¥–∞—Ç—å —Å—Ä–æ—á–Ω—É—é –∑–∞—è–≤–∫—É', callback_data: 'urgent_ticket' }
        ],
        [
          { text: 'üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
  async shutdown() {
    console.log(`üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞ (ID: ${this.instanceId})...`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    this.isRunning = false;
    
    try {
      if (this.bot) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...');
        this.bot.removeAllListeners();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        try {
          console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞...');
          await this.bot.stopPolling();
        } catch (e) {
          console.log('‚ö†Ô∏è –ü–æ–ª–ª–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞:', e.message);
        }
        
        // –£–¥–∞–ª—è–µ–º webhook
        try {
          console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ webhook...');
          await this.bot.deleteWebHook();
        } catch (e) {
          console.log('‚ö†Ô∏è Webhook —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞:', e.message);
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try {
          console.log('üîå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
          await this.bot.close();
        } catch (e) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', e.message);
        }
        
        // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (5 —Å–µ–∫—É–Ω–¥)...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        console.log(`‚úÖ Telegram –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (ID: ${this.instanceId})`);
      }
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (this.userStates) {
        this.userStates.clear();
      }
      
      // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
      if (global.telegramBot === this) {
        global.telegramBot = null;
      }
      
      // –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
      this.bot = null;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –±–æ—Ç–∞ (ID: ${this.instanceId}):`, error.message);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.bot = null;
      if (global.telegramBot === this) {
        global.telegramBot = null;
      }
    }
  }
}

module.exports = HelpdeskTelegramBot;