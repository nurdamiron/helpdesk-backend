/**
 * Singleton –¥–ª—è Telegram –±–æ—Ç–∞ - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
 */

const HelpdeskTelegramBot = require('./bot');
const fs = require('fs');
const path = require('path');

class TelegramBotSingleton {
  constructor() {
    this.instance = null;
    this.isInitializing = false;
    this.initializationPromise = null;
    this.lockFile = path.join(__dirname, '.telegram-bot.lock');
    this.instanceId = `${process.pid}-${Date.now()}`;
  }

  async getInstance() {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ–º–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∂–¥–µ–º –µ–≥–æ
    if (this.initializationPromise) {
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞...');
      return await this.initializationPromise;
    }

    // –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (this.instance && this.instance.isRunning) {
      return this.instance;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.initializationPromise = this._createInstance();
    
    try {
      const instance = await this.initializationPromise;
      return instance;
    } finally {
      this.initializationPromise = null;
    }
  }

  async _createInstance() {
    try {
      console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Telegram –±–æ—Ç–∞...');
      console.log(`üìç Instance ID: ${this.instanceId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º lock —Ñ–∞–π–ª
      if (!await this._acquireLock()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞');
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
      await this._cleanupExistingInstances();

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ Telegram API
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ Telegram API (10 —Å–µ–∫—É–Ω–¥)...');
      await new Promise(resolve => setTimeout(resolve, 10000));

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
      this.instance = new HelpdeskTelegramBot();
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      let attempts = 0;
      const maxAttempts = 60; // 60 —Å–µ–∫—É–Ω–¥
      
      while (this.instance.isInitializing && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        attempts++;
        
        // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
        if (attempts % 10 === 0) {
          console.log(`‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞... (${attempts}/${maxAttempts} —Å–µ–∫)`);
        }
      }

      if (this.instance.isInitializing) {
        await this._releaseLock();
        throw new Error('Timeout: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
      this.instance.isRunning = true;

      console.log('‚úÖ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      return this.instance;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Telegram –±–æ—Ç–∞:', error.message);
      this.instance = null;
      await this._releaseLock();
      throw error;
    }
  }

  async _cleanupExistingInstances() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤...');
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if (global.telegramBot) {
      try {
        console.log('üìç –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞...');
        await global.telegramBot.shutdown();
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:', error.message);
      }
      global.telegramBot = null;
    }

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if (this.instance) {
      try {
        console.log('üìç –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞...');
        await this.instance.shutdown();
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:', error.message);
      }
      this.instance = null;
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ Telegram API
    try {
      console.log('üìç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Telegram API...');
      const TelegramBot = require('node-telegram-bot-api');
      const token = process.env.TELEGRAM_BOT_TOKEN;
      
      if (token) {
        const tempBot = new TelegramBot(token, { polling: false, webHook: false });
        
        // –£–¥–∞–ª—è–µ–º webhook
        try {
          await tempBot.deleteWebHook();
          console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω');
        } catch (e) {
          console.log('‚ö†Ô∏è Webhook —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞:', e.message);
        }
        
        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        try {
          await tempBot.getUpdates({ offset: -1, limit: 100 });
          console.log('‚úÖ –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞');
        } catch (e) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', e.message);
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç
        try {
          await tempBot.close();
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
  }

  async _acquireLock() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ lock —Ñ–∞–π–ª–∞
      if (fs.existsSync(this.lockFile)) {
        const lockData = fs.readFileSync(this.lockFile, 'utf8');
        const lockInfo = JSON.parse(lockData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ lock (–±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç)
        const lockAge = Date.now() - lockInfo.timestamp;
        if (lockAge > 5 * 60 * 1000) {
          console.log('üîì –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª');
          fs.unlinkSync(this.lockFile);
        } else {
          console.log(`‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º (PID: ${lockInfo.pid})`);
          return false;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º lock —Ñ–∞–π–ª
      fs.writeFileSync(this.lockFile, JSON.stringify({
        pid: process.pid,
        instanceId: this.instanceId,
        timestamp: Date.now()
      }));
      
      console.log('üîí Lock —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å lock —Ñ–∞–π–ª–æ–º:', error.message);
      return false;
    }
  }

  async _releaseLock() {
    try {
      if (fs.existsSync(this.lockFile)) {
        const lockData = fs.readFileSync(this.lockFile, 'utf8');
        const lockInfo = JSON.parse(lockData);
        
        // –£–¥–∞–ª—è–µ–º lock —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
        if (lockInfo.instanceId === this.instanceId) {
          fs.unlinkSync(this.lockFile);
          console.log('üîì Lock —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è lock —Ñ–∞–π–ª–∞:', error.message);
    }
  }

  async destroy() {
    console.log('üõë –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Telegram –±–æ—Ç–∞...');
    
    if (this.instance) {
      try {
        this.instance.isRunning = false;
        await this.instance.shutdown();
        this.instance = null;
        console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:', error.message);
        this.instance = null;
      }
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º lock
    await this._releaseLock();
    
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if (global.telegramBot === this.instance) {
      global.telegramBot = null;
    }
  }

  hasInstance() {
    return this.instance !== null && this.instance.isRunning === true;
  }

  getInstanceInfo() {
    return {
      hasInstance: this.hasInstance(),
      instanceId: this.instanceId,
      isInitializing: this.isInitializing,
      pid: process.pid
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
const singleton = new TelegramBotSingleton();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('exit', async () => {
  await singleton._releaseLock();
});

process.on('SIGINT', async () => {
  await singleton.destroy();
});

process.on('SIGTERM', async () => {
  await singleton.destroy();
});

module.exports = singleton;